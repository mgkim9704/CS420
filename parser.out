Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     function_definition -> declaration_specifiers declarator declaration_listopt compound_statement
Rule 6     declaration -> declaration_specifiers init_declarator_listopt SEMI
Rule 7     declaration_listopt -> declaration_list
Rule 8     declaration_listopt -> empty
Rule 9     declaration_list -> declaration
Rule 10    declaration_list -> declaration_list declaration
Rule 11    declaration_specifiersopt -> declaration_specifiers
Rule 12    declaration_specifiersopt -> empty
Rule 13    declaration_specifiers -> storage_class_specifier declaration_specifiersopt
Rule 14    declaration_specifiers -> type_specifier declaration_specifiersopt
Rule 15    storage_class_specifier -> EXTERN
Rule 16    storage_class_specifier -> STATIC
Rule 17    type_specifier -> VOID
Rule 18    type_specifier -> CHAR
Rule 19    type_specifier -> INT
Rule 20    type_specifier -> FLOAT
Rule 21    init_declarator_listopt -> init_declarator_list
Rule 22    init_declarator_listopt -> empty
Rule 23    init_declarator_list -> init_declarator
Rule 24    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 25    init_declarator -> declarator
Rule 26    init_declarator -> declarator EQUALS initializer
Rule 27    specifier_qualifier_listopt -> specifier_qualifier_list
Rule 28    specifier_qualifier_listopt -> empty
Rule 29    specifier_qualifier_list -> type_specifier specifier_qualifier_listopt
Rule 30    declarator -> pointeropt direct_declarator
Rule 31    direct_declarator -> ID
Rule 32    direct_declarator -> LPAREN declarator RPAREN
Rule 33    direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET
Rule 34    direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET
Rule 35    direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET
Rule 36    direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 37    direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN
Rule 38    pointeropt -> pointer
Rule 39    pointeropt -> empty
Rule 40    pointer -> TIMES
Rule 41    pointer -> TIMES pointer
Rule 42    parameter_list -> parameter_declaration
Rule 43    parameter_list -> parameter_list COMMA parameter_declaration
Rule 44    parameter_declaration -> declaration_specifiers declarator
Rule 45    parameter_declaration -> declaration_specifiers
Rule 46    identifier_listopt -> identifier_list
Rule 47    identifier_listopt -> empty
Rule 48    identifier_list -> ID
Rule 49    identifier_list -> identifier_list COMMA ID
Rule 50    initializer -> assignment_expression
Rule 51    initializer -> LBRACE initializer_list RBRACE
Rule 52    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 53    initializer_list -> initializer
Rule 54    initializer_list -> initializer_list COMMA initializer
Rule 55    type_name -> specifier_qualifier_list
Rule 56    parameter_type_list -> parameter_list
Rule 57    statement -> selection_statement
Rule 58    statement -> iteration_statement
Rule 59    statement -> jump_statement
Rule 60    statement -> compound_statement
Rule 61    statement -> expression_statement
Rule 62    selection_statement -> IF LPAREN expression RPAREN statement
Rule 63    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 64    iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement
Rule 65    iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement
Rule 66    jump_statement -> RETURN expressionopt SEMI
Rule 67    jump_statement -> BREAK SEMI
Rule 68    jump_statement -> CONTINUE SEMI
Rule 69    compound_statement -> LBRACE block_item_listopt RBRACE
Rule 70    block_item_listopt -> block_item_list
Rule 71    block_item_listopt -> empty
Rule 72    block_item_list -> block_item
Rule 73    block_item_list -> block_item_list block_item
Rule 74    block_item -> declaration
Rule 75    block_item -> statement
Rule 76    expression_statement -> expressionopt SEMI
Rule 77    expressionopt -> expression
Rule 78    expressionopt -> empty
Rule 79    expression -> assignment_expression
Rule 80    assignment_expressionopt -> assignment_expression
Rule 81    assignment_expressionopt -> empty
Rule 82    assignment_expression -> conditional_expression
Rule 83    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 84    assignment_operator -> EQUALS
Rule 85    conditional_expression -> logical_OR_expression
Rule 86    logical_OR_expression -> logical_AND_expression
Rule 87    logical_OR_expression -> logical_OR_expression LOR logical_AND_expression
Rule 88    logical_AND_expression -> inclusive_OR_expression
Rule 89    logical_AND_expression -> logical_AND_expression LAND inclusive_OR_expression
Rule 90    inclusive_OR_expression -> exclusive_OR_expression
Rule 91    inclusive_OR_expression -> inclusive_OR_expression OR exclusive_OR_expression
Rule 92    exclusive_OR_expression -> AND_expression
Rule 93    exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression
Rule 94    AND_expression -> equality_expression
Rule 95    AND_expression -> AND_expression AND equality_expression
Rule 96    equality_expression -> relational_expression
Rule 97    equality_expression -> equality_expression EQ relational_expression
Rule 98    equality_expression -> equality_expression NE relational_expression
Rule 99    relational_expression -> shift_expression
Rule 100   relational_expression -> relational_expression LT shift_expression
Rule 101   relational_expression -> relational_expression GT shift_expression
Rule 102   relational_expression -> relational_expression LE shift_expression
Rule 103   relational_expression -> relational_expression GE shift_expression
Rule 104   shift_expression -> additive_expression
Rule 105   shift_expression -> shift_expression LSHIFT additive_expression
Rule 106   shift_expression -> shift_expression RSHIFT additive_expression
Rule 107   additive_expression -> multiplicative_expression
Rule 108   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 109   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 110   multiplicative_expression -> cast_expression
Rule 111   multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 112   multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 113   multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 114   cast_expression -> unary_expression
Rule 115   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 116   unary_expression -> postfix_expression
Rule 117   unary_expression -> INCREMENT unary_expression
Rule 118   unary_expression -> DECREMENT unary_expression
Rule 119   unary_expression -> unary_operator cast_expression
Rule 120   unary_operator -> AND
Rule 121   unary_operator -> TIMES
Rule 122   unary_operator -> PLUS
Rule 123   unary_operator -> MINUS
Rule 124   unary_operator -> NOT
Rule 125   unary_operator -> LNOT
Rule 126   postfix_expression -> primary_expression
Rule 127   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 128   postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN
Rule 129   postfix_expression -> postfix_expression INCREMENT
Rule 130   postfix_expression -> postfix_expression DECREMENT
Rule 131   postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
Rule 132   postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
Rule 133   primary_expression -> ID
Rule 134   primary_expression -> constant
Rule 135   primary_expression -> STRING
Rule 136   primary_expression -> LPAREN expression RPAREN
Rule 137   argument_expression_listopt -> argument_expression_list
Rule 138   argument_expression_listopt -> empty
Rule 139   argument_expression_list -> assignment_expression
Rule 140   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 141   constant -> INUM
Rule 142   constant -> FNUM
Rule 143   constant -> CHARACTER
Rule 144   empty -> <empty>

Terminals, with rules where they appear

AND                  : 95 120
BREAK                : 67
CHAR                 : 18
CHARACTER            : 143
COMMA                : 24 43 49 52 54 132 140
CONTINUE             : 68
DECREMENT            : 118 130
DIVIDE               : 112
ELSE                 : 63
EQ                   : 97
EQUALS               : 26 84
EXTERN               : 15
FLOAT                : 20
FNUM                 : 142
FOR                  : 64 65
GE                   : 103
GT                   : 101
ID                   : 31 48 49 133
IF                   : 62 63
INCREMENT            : 117 129
INT                  : 19
INUM                 : 141
LAND                 : 89
LBRACE               : 51 52 69
LBRACKET             : 33 34 35 127 131 132
LE                   : 102
LNOT                 : 125
LOR                  : 87
LPAREN               : 32 36 37 62 63 64 65 115 128 131 132 136
LSHIFT               : 105
LT                   : 100
MINUS                : 109 123
MOD                  : 113
NE                   : 98
NOT                  : 124
OR                   : 91
PLUS                 : 108 122
RBRACE               : 51 52 69
RBRACKET             : 33 34 35 127 131 132
RETURN               : 66
RPAREN               : 32 36 37 62 63 64 65 115 128 131 132 136
RSHIFT               : 106
SEMI                 : 6 64 64 65 66 67 68 76
STATIC               : 16 34
STRING               : 135
TIMES                : 35 40 41 111 121
VOID                 : 17
XOR                  : 93
error                : 

Nonterminals, with rules where they appear

AND_expression       : 92 93 95
additive_expression  : 104 105 106 108 109
argument_expression_list : 137 140
argument_expression_listopt : 128
assignment_expression : 34 50 79 80 83 139 140
assignment_expressionopt : 33
assignment_operator  : 83
block_item           : 72 73
block_item_list      : 70 73
block_item_listopt   : 69
cast_expression      : 110 111 112 113 115 119
compound_statement   : 5 60
conditional_expression : 82
constant             : 134
declaration          : 4 9 10 65 74
declaration_list     : 7 10
declaration_listopt  : 5
declaration_specifiers : 5 6 11 44 45
declaration_specifiersopt : 13 14
declarator           : 5 25 26 32 44
direct_declarator    : 30 33 34 35 36 37
empty                : 8 12 22 28 39 47 71 78 81 138
equality_expression  : 94 95 97 98
exclusive_OR_expression : 90 91 93
expression           : 62 63 77 127 136
expression_statement : 61
expressionopt        : 64 64 64 65 65 66 76
external_declaration : 1 2
function_definition  : 3
identifier_list      : 46 49
identifier_listopt   : 37
inclusive_OR_expression : 88 89 91
init_declarator      : 23 24
init_declarator_list : 21 24
init_declarator_listopt : 6
initializer          : 26 53 54
initializer_list     : 51 52 54 131 132
iteration_statement  : 58
jump_statement       : 59
logical_AND_expression : 86 87 89
logical_OR_expression : 85 87
multiplicative_expression : 107 108 109 111 112 113
parameter_declaration : 42 43
parameter_list       : 43 56
parameter_type_list  : 36
pointer              : 38 41
pointeropt           : 30
postfix_expression   : 116 127 128 129 130
primary_expression   : 126
relational_expression : 96 97 98 100 101 102 103
selection_statement  : 57
shift_expression     : 99 100 101 102 103 105 106
specifier_qualifier_list : 27 55
specifier_qualifier_listopt : 29
statement            : 62 63 63 64 65 75
storage_class_specifier : 13
translation_unit     : 2 0
type_name            : 115 131 132
type_specifier       : 14 29
unary_expression     : 83 114 117 118
unary_operator       : 119

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . declaration_specifiers declarator declaration_listopt compound_statement
    (6) declaration -> . declaration_specifiers init_declarator_listopt SEMI
    (13) declaration_specifiers -> . storage_class_specifier declaration_specifiersopt
    (14) declaration_specifiers -> . type_specifier declaration_specifiersopt
    (15) storage_class_specifier -> . EXTERN
    (16) storage_class_specifier -> . STATIC
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT

    EXTERN          shift and go to state 8
    STATIC          shift and go to state 9
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . declaration_specifiers declarator declaration_listopt compound_statement
    (6) declaration -> . declaration_specifiers init_declarator_listopt SEMI
    (13) declaration_specifiers -> . storage_class_specifier declaration_specifiersopt
    (14) declaration_specifiers -> . type_specifier declaration_specifiersopt
    (15) storage_class_specifier -> . EXTERN
    (16) storage_class_specifier -> . STATIC
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT

    EXTERN          shift and go to state 8
    STATIC          shift and go to state 9
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    external_declaration           shift and go to state 14
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7

state 2

    (1) translation_unit -> external_declaration .

    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> function_definition .

    EXTERN          reduce using rule 3 (external_declaration -> function_definition .)
    STATIC          reduce using rule 3 (external_declaration -> function_definition .)
    VOID            reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 4

    (4) external_declaration -> declaration .

    EXTERN          reduce using rule 4 (external_declaration -> declaration .)
    STATIC          reduce using rule 4 (external_declaration -> declaration .)
    VOID            reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    FLOAT           reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (5) function_definition -> declaration_specifiers . declarator declaration_listopt compound_statement
    (6) declaration -> declaration_specifiers . init_declarator_listopt SEMI
    (30) declarator -> . pointeropt direct_declarator
    (21) init_declarator_listopt -> . init_declarator_list
    (22) init_declarator_listopt -> . empty
    (38) pointeropt -> . pointer
    (39) pointeropt -> . empty
    (23) init_declarator_list -> . init_declarator
    (24) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (144) empty -> .
    (40) pointer -> . TIMES
    (41) pointer -> . TIMES pointer
    (25) init_declarator -> . declarator
    (26) init_declarator -> . declarator EQUALS initializer

    SEMI            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    LPAREN          reduce using rule 144 (empty -> .)
    TIMES           shift and go to state 22

    declarator                     shift and go to state 15
    init_declarator_listopt        shift and go to state 16
    pointeropt                     shift and go to state 17
    init_declarator_list           shift and go to state 18
    empty                          shift and go to state 19
    pointer                        shift and go to state 20
    init_declarator                shift and go to state 21

state 6

    (13) declaration_specifiers -> storage_class_specifier . declaration_specifiersopt
    (11) declaration_specifiersopt -> . declaration_specifiers
    (12) declaration_specifiersopt -> . empty
    (13) declaration_specifiers -> . storage_class_specifier declaration_specifiersopt
    (14) declaration_specifiers -> . type_specifier declaration_specifiersopt
    (144) empty -> .
    (15) storage_class_specifier -> . EXTERN
    (16) storage_class_specifier -> . STATIC
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT

    TIMES           reduce using rule 144 (empty -> .)
    SEMI            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    LPAREN          reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    EXTERN          shift and go to state 8
    STATIC          shift and go to state 9
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    storage_class_specifier        shift and go to state 6
    declaration_specifiersopt      shift and go to state 23
    declaration_specifiers         shift and go to state 24
    empty                          shift and go to state 25
    type_specifier                 shift and go to state 7

state 7

    (14) declaration_specifiers -> type_specifier . declaration_specifiersopt
    (11) declaration_specifiersopt -> . declaration_specifiers
    (12) declaration_specifiersopt -> . empty
    (13) declaration_specifiers -> . storage_class_specifier declaration_specifiersopt
    (14) declaration_specifiers -> . type_specifier declaration_specifiersopt
    (144) empty -> .
    (15) storage_class_specifier -> . EXTERN
    (16) storage_class_specifier -> . STATIC
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT

    TIMES           reduce using rule 144 (empty -> .)
    SEMI            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    LPAREN          reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAREN          reduce using rule 144 (empty -> .)
    EXTERN          shift and go to state 8
    STATIC          shift and go to state 9
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    type_specifier                 shift and go to state 7
    declaration_specifiersopt      shift and go to state 26
    declaration_specifiers         shift and go to state 24
    empty                          shift and go to state 25
    storage_class_specifier        shift and go to state 6

state 8

    (15) storage_class_specifier -> EXTERN .

    EXTERN          reduce using rule 15 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 15 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 15 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 15 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 15 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 15 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 15 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 15 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 15 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 15 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 15 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 15 (storage_class_specifier -> EXTERN .)


state 9

    (16) storage_class_specifier -> STATIC .

    EXTERN          reduce using rule 16 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 16 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 16 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 16 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 16 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 16 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 16 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 16 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 16 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 16 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 16 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 16 (storage_class_specifier -> STATIC .)


state 10

    (17) type_specifier -> VOID .

    EXTERN          reduce using rule 17 (type_specifier -> VOID .)
    STATIC          reduce using rule 17 (type_specifier -> VOID .)
    VOID            reduce using rule 17 (type_specifier -> VOID .)
    CHAR            reduce using rule 17 (type_specifier -> VOID .)
    INT             reduce using rule 17 (type_specifier -> VOID .)
    FLOAT           reduce using rule 17 (type_specifier -> VOID .)
    TIMES           reduce using rule 17 (type_specifier -> VOID .)
    SEMI            reduce using rule 17 (type_specifier -> VOID .)
    ID              reduce using rule 17 (type_specifier -> VOID .)
    LPAREN          reduce using rule 17 (type_specifier -> VOID .)
    COMMA           reduce using rule 17 (type_specifier -> VOID .)
    RPAREN          reduce using rule 17 (type_specifier -> VOID .)


state 11

    (18) type_specifier -> CHAR .

    EXTERN          reduce using rule 18 (type_specifier -> CHAR .)
    STATIC          reduce using rule 18 (type_specifier -> CHAR .)
    VOID            reduce using rule 18 (type_specifier -> CHAR .)
    CHAR            reduce using rule 18 (type_specifier -> CHAR .)
    INT             reduce using rule 18 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 18 (type_specifier -> CHAR .)
    TIMES           reduce using rule 18 (type_specifier -> CHAR .)
    SEMI            reduce using rule 18 (type_specifier -> CHAR .)
    ID              reduce using rule 18 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 18 (type_specifier -> CHAR .)
    COMMA           reduce using rule 18 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 18 (type_specifier -> CHAR .)


state 12

    (19) type_specifier -> INT .

    EXTERN          reduce using rule 19 (type_specifier -> INT .)
    STATIC          reduce using rule 19 (type_specifier -> INT .)
    VOID            reduce using rule 19 (type_specifier -> INT .)
    CHAR            reduce using rule 19 (type_specifier -> INT .)
    INT             reduce using rule 19 (type_specifier -> INT .)
    FLOAT           reduce using rule 19 (type_specifier -> INT .)
    TIMES           reduce using rule 19 (type_specifier -> INT .)
    SEMI            reduce using rule 19 (type_specifier -> INT .)
    ID              reduce using rule 19 (type_specifier -> INT .)
    LPAREN          reduce using rule 19 (type_specifier -> INT .)
    COMMA           reduce using rule 19 (type_specifier -> INT .)
    RPAREN          reduce using rule 19 (type_specifier -> INT .)


state 13

    (20) type_specifier -> FLOAT .

    EXTERN          reduce using rule 20 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 20 (type_specifier -> FLOAT .)
    VOID            reduce using rule 20 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 20 (type_specifier -> FLOAT .)
    INT             reduce using rule 20 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 20 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 20 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 20 (type_specifier -> FLOAT .)
    ID              reduce using rule 20 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 20 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 20 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 20 (type_specifier -> FLOAT .)


state 14

    (2) translation_unit -> translation_unit external_declaration .

    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 15

    (5) function_definition -> declaration_specifiers declarator . declaration_listopt compound_statement
    (25) init_declarator -> declarator .
    (26) init_declarator -> declarator . EQUALS initializer
    (7) declaration_listopt -> . declaration_list
    (8) declaration_listopt -> . empty
    (9) declaration_list -> . declaration
    (10) declaration_list -> . declaration_list declaration
    (144) empty -> .
    (6) declaration -> . declaration_specifiers init_declarator_listopt SEMI
    (13) declaration_specifiers -> . storage_class_specifier declaration_specifiersopt
    (14) declaration_specifiers -> . type_specifier declaration_specifiersopt
    (15) storage_class_specifier -> . EXTERN
    (16) storage_class_specifier -> . STATIC
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT

    COMMA           reduce using rule 25 (init_declarator -> declarator .)
    SEMI            reduce using rule 25 (init_declarator -> declarator .)
    EQUALS          shift and go to state 29
    LBRACE          reduce using rule 144 (empty -> .)
    EXTERN          shift and go to state 8
    STATIC          shift and go to state 9
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    declaration_specifiers         shift and go to state 27
    declaration_listopt            shift and go to state 28
    declaration_list               shift and go to state 30
    empty                          shift and go to state 31
    declaration                    shift and go to state 32
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7

state 16

    (6) declaration -> declaration_specifiers init_declarator_listopt . SEMI

    SEMI            shift and go to state 33


state 17

    (30) declarator -> pointeropt . direct_declarator
    (31) direct_declarator -> . ID
    (32) direct_declarator -> . LPAREN declarator RPAREN
    (33) direct_declarator -> . direct_declarator LBRACKET assignment_expressionopt RBRACKET
    (34) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (35) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (36) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (37) direct_declarator -> . direct_declarator LPAREN identifier_listopt RPAREN

    ID              shift and go to state 35
    LPAREN          shift and go to state 36

    direct_declarator              shift and go to state 34

state 18

    (21) init_declarator_listopt -> init_declarator_list .
    (24) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 21 (init_declarator_listopt -> init_declarator_list .)
    COMMA           shift and go to state 37


state 19

    (22) init_declarator_listopt -> empty .
    (39) pointeropt -> empty .

    SEMI            reduce using rule 22 (init_declarator_listopt -> empty .)
    ID              reduce using rule 39 (pointeropt -> empty .)
    LPAREN          reduce using rule 39 (pointeropt -> empty .)


state 20

    (38) pointeropt -> pointer .

    ID              reduce using rule 38 (pointeropt -> pointer .)
    LPAREN          reduce using rule 38 (pointeropt -> pointer .)


state 21

    (23) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 23 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 23 (init_declarator_list -> init_declarator .)


state 22

    (40) pointer -> TIMES .
    (41) pointer -> TIMES . pointer
    (40) pointer -> . TIMES
    (41) pointer -> . TIMES pointer

    ID              reduce using rule 40 (pointer -> TIMES .)
    LPAREN          reduce using rule 40 (pointer -> TIMES .)
    TIMES           shift and go to state 22

    pointer                        shift and go to state 38

state 23

    (13) declaration_specifiers -> storage_class_specifier declaration_specifiersopt .

    TIMES           reduce using rule 13 (declaration_specifiers -> storage_class_specifier declaration_specifiersopt .)
    SEMI            reduce using rule 13 (declaration_specifiers -> storage_class_specifier declaration_specifiersopt .)
    ID              reduce using rule 13 (declaration_specifiers -> storage_class_specifier declaration_specifiersopt .)
    LPAREN          reduce using rule 13 (declaration_specifiers -> storage_class_specifier declaration_specifiersopt .)
    COMMA           reduce using rule 13 (declaration_specifiers -> storage_class_specifier declaration_specifiersopt .)
    RPAREN          reduce using rule 13 (declaration_specifiers -> storage_class_specifier declaration_specifiersopt .)


state 24

    (11) declaration_specifiersopt -> declaration_specifiers .

    TIMES           reduce using rule 11 (declaration_specifiersopt -> declaration_specifiers .)
    SEMI            reduce using rule 11 (declaration_specifiersopt -> declaration_specifiers .)
    ID              reduce using rule 11 (declaration_specifiersopt -> declaration_specifiers .)
    LPAREN          reduce using rule 11 (declaration_specifiersopt -> declaration_specifiers .)
    COMMA           reduce using rule 11 (declaration_specifiersopt -> declaration_specifiers .)
    RPAREN          reduce using rule 11 (declaration_specifiersopt -> declaration_specifiers .)


state 25

    (12) declaration_specifiersopt -> empty .

    TIMES           reduce using rule 12 (declaration_specifiersopt -> empty .)
    SEMI            reduce using rule 12 (declaration_specifiersopt -> empty .)
    ID              reduce using rule 12 (declaration_specifiersopt -> empty .)
    LPAREN          reduce using rule 12 (declaration_specifiersopt -> empty .)
    COMMA           reduce using rule 12 (declaration_specifiersopt -> empty .)
    RPAREN          reduce using rule 12 (declaration_specifiersopt -> empty .)


state 26

    (14) declaration_specifiers -> type_specifier declaration_specifiersopt .

    TIMES           reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiersopt .)
    SEMI            reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiersopt .)
    ID              reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiersopt .)
    LPAREN          reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiersopt .)
    COMMA           reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiersopt .)
    RPAREN          reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiersopt .)


state 27

    (6) declaration -> declaration_specifiers . init_declarator_listopt SEMI
    (21) init_declarator_listopt -> . init_declarator_list
    (22) init_declarator_listopt -> . empty
    (23) init_declarator_list -> . init_declarator
    (24) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (144) empty -> .
    (25) init_declarator -> . declarator
    (26) init_declarator -> . declarator EQUALS initializer
    (30) declarator -> . pointeropt direct_declarator
    (38) pointeropt -> . pointer
    (39) pointeropt -> . empty
    (40) pointer -> . TIMES
    (41) pointer -> . TIMES pointer

    SEMI            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    LPAREN          reduce using rule 144 (empty -> .)
    TIMES           shift and go to state 22

    init_declarator_listopt        shift and go to state 16
    init_declarator_list           shift and go to state 18
    empty                          shift and go to state 19
    init_declarator                shift and go to state 21
    declarator                     shift and go to state 39
    pointeropt                     shift and go to state 17
    pointer                        shift and go to state 20

state 28

    (5) function_definition -> declaration_specifiers declarator declaration_listopt . compound_statement
    (69) compound_statement -> . LBRACE block_item_listopt RBRACE

    LBRACE          shift and go to state 41

    compound_statement             shift and go to state 40

state 29

    (26) init_declarator -> declarator EQUALS . initializer
    (50) initializer -> . assignment_expression
    (51) initializer -> . LBRACE initializer_list RBRACE
    (52) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 44
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    initializer                    shift and go to state 42
    assignment_expression          shift and go to state 43
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 30

    (7) declaration_listopt -> declaration_list .
    (10) declaration_list -> declaration_list . declaration
    (6) declaration -> . declaration_specifiers init_declarator_listopt SEMI
    (13) declaration_specifiers -> . storage_class_specifier declaration_specifiersopt
    (14) declaration_specifiers -> . type_specifier declaration_specifiersopt
    (15) storage_class_specifier -> . EXTERN
    (16) storage_class_specifier -> . STATIC
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT

    LBRACE          reduce using rule 7 (declaration_listopt -> declaration_list .)
    EXTERN          shift and go to state 8
    STATIC          shift and go to state 9
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    declaration                    shift and go to state 76
    declaration_specifiers         shift and go to state 27
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7

state 31

    (8) declaration_listopt -> empty .

    LBRACE          reduce using rule 8 (declaration_listopt -> empty .)


state 32

    (9) declaration_list -> declaration .

    EXTERN          reduce using rule 9 (declaration_list -> declaration .)
    STATIC          reduce using rule 9 (declaration_list -> declaration .)
    VOID            reduce using rule 9 (declaration_list -> declaration .)
    CHAR            reduce using rule 9 (declaration_list -> declaration .)
    INT             reduce using rule 9 (declaration_list -> declaration .)
    FLOAT           reduce using rule 9 (declaration_list -> declaration .)
    LBRACE          reduce using rule 9 (declaration_list -> declaration .)


state 33

    (6) declaration -> declaration_specifiers init_declarator_listopt SEMI .

    EXTERN          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    STATIC          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    VOID            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    CHAR            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    INT             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    FLOAT           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    $end            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    LBRACE          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    IF              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    FOR             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    RETURN          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    BREAK           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    CONTINUE        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    INCREMENT       reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    DECREMENT       reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    LPAREN          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    AND             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    TIMES           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    PLUS            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    MINUS           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    NOT             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    LNOT            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    ID              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    STRING          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    INUM            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    FNUM            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    CHARACTER       reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    SEMI            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)
    RBRACE          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_listopt SEMI .)


state 34

    (30) declarator -> pointeropt direct_declarator .
    (33) direct_declarator -> direct_declarator . LBRACKET assignment_expressionopt RBRACKET
    (34) direct_declarator -> direct_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (35) direct_declarator -> direct_declarator . LBRACKET TIMES RBRACKET
    (36) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (37) direct_declarator -> direct_declarator . LPAREN identifier_listopt RPAREN

    EQUALS          reduce using rule 30 (declarator -> pointeropt direct_declarator .)
    EXTERN          reduce using rule 30 (declarator -> pointeropt direct_declarator .)
    STATIC          reduce using rule 30 (declarator -> pointeropt direct_declarator .)
    VOID            reduce using rule 30 (declarator -> pointeropt direct_declarator .)
    CHAR            reduce using rule 30 (declarator -> pointeropt direct_declarator .)
    INT             reduce using rule 30 (declarator -> pointeropt direct_declarator .)
    FLOAT           reduce using rule 30 (declarator -> pointeropt direct_declarator .)
    LBRACE          reduce using rule 30 (declarator -> pointeropt direct_declarator .)
    COMMA           reduce using rule 30 (declarator -> pointeropt direct_declarator .)
    SEMI            reduce using rule 30 (declarator -> pointeropt direct_declarator .)
    RPAREN          reduce using rule 30 (declarator -> pointeropt direct_declarator .)
    LBRACKET        shift and go to state 77
    LPAREN          shift and go to state 78


state 35

    (31) direct_declarator -> ID .

    LBRACKET        reduce using rule 31 (direct_declarator -> ID .)
    LPAREN          reduce using rule 31 (direct_declarator -> ID .)
    EQUALS          reduce using rule 31 (direct_declarator -> ID .)
    EXTERN          reduce using rule 31 (direct_declarator -> ID .)
    STATIC          reduce using rule 31 (direct_declarator -> ID .)
    VOID            reduce using rule 31 (direct_declarator -> ID .)
    CHAR            reduce using rule 31 (direct_declarator -> ID .)
    INT             reduce using rule 31 (direct_declarator -> ID .)
    FLOAT           reduce using rule 31 (direct_declarator -> ID .)
    LBRACE          reduce using rule 31 (direct_declarator -> ID .)
    COMMA           reduce using rule 31 (direct_declarator -> ID .)
    SEMI            reduce using rule 31 (direct_declarator -> ID .)
    RPAREN          reduce using rule 31 (direct_declarator -> ID .)


state 36

    (32) direct_declarator -> LPAREN . declarator RPAREN
    (30) declarator -> . pointeropt direct_declarator
    (38) pointeropt -> . pointer
    (39) pointeropt -> . empty
    (40) pointer -> . TIMES
    (41) pointer -> . TIMES pointer
    (144) empty -> .

    TIMES           shift and go to state 22
    ID              reduce using rule 144 (empty -> .)
    LPAREN          reduce using rule 144 (empty -> .)

    declarator                     shift and go to state 79
    pointeropt                     shift and go to state 17
    pointer                        shift and go to state 20
    empty                          shift and go to state 80

state 37

    (24) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (25) init_declarator -> . declarator
    (26) init_declarator -> . declarator EQUALS initializer
    (30) declarator -> . pointeropt direct_declarator
    (38) pointeropt -> . pointer
    (39) pointeropt -> . empty
    (40) pointer -> . TIMES
    (41) pointer -> . TIMES pointer
    (144) empty -> .

    TIMES           shift and go to state 22
    ID              reduce using rule 144 (empty -> .)
    LPAREN          reduce using rule 144 (empty -> .)

    init_declarator                shift and go to state 81
    declarator                     shift and go to state 39
    pointeropt                     shift and go to state 17
    pointer                        shift and go to state 20
    empty                          shift and go to state 80

state 38

    (41) pointer -> TIMES pointer .

    ID              reduce using rule 41 (pointer -> TIMES pointer .)
    LPAREN          reduce using rule 41 (pointer -> TIMES pointer .)


state 39

    (25) init_declarator -> declarator .
    (26) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 25 (init_declarator -> declarator .)
    SEMI            reduce using rule 25 (init_declarator -> declarator .)
    EQUALS          shift and go to state 29


state 40

    (5) function_definition -> declaration_specifiers declarator declaration_listopt compound_statement .

    EXTERN          reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_listopt compound_statement .)
    STATIC          reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_listopt compound_statement .)
    VOID            reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_listopt compound_statement .)
    CHAR            reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_listopt compound_statement .)
    INT             reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_listopt compound_statement .)
    FLOAT           reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_listopt compound_statement .)
    $end            reduce using rule 5 (function_definition -> declaration_specifiers declarator declaration_listopt compound_statement .)


state 41

    (69) compound_statement -> LBRACE . block_item_listopt RBRACE
    (70) block_item_listopt -> . block_item_list
    (71) block_item_listopt -> . empty
    (72) block_item_list -> . block_item
    (73) block_item_list -> . block_item_list block_item
    (144) empty -> .
    (74) block_item -> . declaration
    (75) block_item -> . statement
    (6) declaration -> . declaration_specifiers init_declarator_listopt SEMI
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (13) declaration_specifiers -> . storage_class_specifier declaration_specifiersopt
    (14) declaration_specifiers -> . type_specifier declaration_specifiersopt
    (62) selection_statement -> . IF LPAREN expression RPAREN statement
    (63) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (64) iteration_statement -> . FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement
    (65) iteration_statement -> . FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement
    (66) jump_statement -> . RETURN expressionopt SEMI
    (67) jump_statement -> . BREAK SEMI
    (68) jump_statement -> . CONTINUE SEMI
    (69) compound_statement -> . LBRACE block_item_listopt RBRACE
    (76) expression_statement -> . expressionopt SEMI
    (15) storage_class_specifier -> . EXTERN
    (16) storage_class_specifier -> . STATIC
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (79) expression -> . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          reduce using rule 144 (empty -> .)
    SEMI            reduce using rule 144 (empty -> .)
    IF              shift and go to state 93
    FOR             shift and go to state 95
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 41
    EXTERN          shift and go to state 8
    STATIC          shift and go to state 9
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    block_item_listopt             shift and go to state 82
    block_item_list                shift and go to state 83
    empty                          shift and go to state 84
    block_item                     shift and go to state 85
    declaration                    shift and go to state 86
    statement                      shift and go to state 87
    declaration_specifiers         shift and go to state 27
    selection_statement            shift and go to state 88
    iteration_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    compound_statement             shift and go to state 91
    expression_statement           shift and go to state 92
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    expression                     shift and go to state 94
    expressionopt                  shift and go to state 96
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 42

    (26) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 26 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 26 (init_declarator -> declarator EQUALS initializer .)


state 43

    (50) initializer -> assignment_expression .

    COMMA           reduce using rule 50 (initializer -> assignment_expression .)
    SEMI            reduce using rule 50 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 50 (initializer -> assignment_expression .)
    RBRACKET        reduce using rule 50 (initializer -> assignment_expression .)


state 44

    (51) initializer -> LBRACE . initializer_list RBRACE
    (52) initializer -> LBRACE . initializer_list COMMA RBRACE
    (53) initializer_list -> . initializer
    (54) initializer_list -> . initializer_list COMMA initializer
    (50) initializer -> . assignment_expression
    (51) initializer -> . LBRACE initializer_list RBRACE
    (52) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 44
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    initializer_list               shift and go to state 101
    initializer                    shift and go to state 102
    assignment_expression          shift and go to state 43
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 45

    (82) assignment_expression -> conditional_expression .

    COMMA           reduce using rule 82 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 82 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 82 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 82 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 82 (assignment_expression -> conditional_expression .)


state 46

    (83) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (114) cast_expression -> unary_expression .
    (84) assignment_operator -> . EQUALS

    TIMES           reduce using rule 114 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 114 (cast_expression -> unary_expression .)
    MOD             reduce using rule 114 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 114 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 114 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 114 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 114 (cast_expression -> unary_expression .)
    LT              reduce using rule 114 (cast_expression -> unary_expression .)
    GT              reduce using rule 114 (cast_expression -> unary_expression .)
    LE              reduce using rule 114 (cast_expression -> unary_expression .)
    GE              reduce using rule 114 (cast_expression -> unary_expression .)
    EQ              reduce using rule 114 (cast_expression -> unary_expression .)
    NE              reduce using rule 114 (cast_expression -> unary_expression .)
    AND             reduce using rule 114 (cast_expression -> unary_expression .)
    XOR             reduce using rule 114 (cast_expression -> unary_expression .)
    OR              reduce using rule 114 (cast_expression -> unary_expression .)
    LAND            reduce using rule 114 (cast_expression -> unary_expression .)
    LOR             reduce using rule 114 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 114 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 114 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 114 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 114 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 114 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 104

    assignment_operator            shift and go to state 103

state 47

    (85) conditional_expression -> logical_OR_expression .
    (87) logical_OR_expression -> logical_OR_expression . LOR logical_AND_expression

    COMMA           reduce using rule 85 (conditional_expression -> logical_OR_expression .)
    SEMI            reduce using rule 85 (conditional_expression -> logical_OR_expression .)
    RBRACE          reduce using rule 85 (conditional_expression -> logical_OR_expression .)
    RPAREN          reduce using rule 85 (conditional_expression -> logical_OR_expression .)
    RBRACKET        reduce using rule 85 (conditional_expression -> logical_OR_expression .)
    LOR             shift and go to state 105


state 48

    (116) unary_expression -> postfix_expression .
    (127) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (128) postfix_expression -> postfix_expression . LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> postfix_expression . INCREMENT
    (130) postfix_expression -> postfix_expression . DECREMENT

    EQUALS          reduce using rule 116 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 116 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 116 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 116 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 116 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 116 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 116 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 116 (unary_expression -> postfix_expression .)
    LT              reduce using rule 116 (unary_expression -> postfix_expression .)
    GT              reduce using rule 116 (unary_expression -> postfix_expression .)
    LE              reduce using rule 116 (unary_expression -> postfix_expression .)
    GE              reduce using rule 116 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 116 (unary_expression -> postfix_expression .)
    NE              reduce using rule 116 (unary_expression -> postfix_expression .)
    AND             reduce using rule 116 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 116 (unary_expression -> postfix_expression .)
    OR              reduce using rule 116 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 116 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 116 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 116 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 116 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 116 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 116 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 116 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 106
    LPAREN          shift and go to state 107
    INCREMENT       shift and go to state 108
    DECREMENT       shift and go to state 109


state 49

    (117) unary_expression -> INCREMENT . unary_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 111
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    unary_expression               shift and go to state 110
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 50

    (118) unary_expression -> DECREMENT . unary_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 111
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    unary_expression               shift and go to state 112
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 51

    (119) unary_expression -> unary_operator . cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 113
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 52

    (110) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 110 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 110 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 110 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 110 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 110 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 110 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 110 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 110 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 110 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 110 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 110 (multiplicative_expression -> cast_expression .)
    EQ              reduce using rule 110 (multiplicative_expression -> cast_expression .)
    NE              reduce using rule 110 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 110 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 110 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 110 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 110 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 110 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 110 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 110 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 110 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 110 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 110 (multiplicative_expression -> cast_expression .)


state 53

    (86) logical_OR_expression -> logical_AND_expression .
    (89) logical_AND_expression -> logical_AND_expression . LAND inclusive_OR_expression

    LOR             reduce using rule 86 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 86 (logical_OR_expression -> logical_AND_expression .)
    SEMI            reduce using rule 86 (logical_OR_expression -> logical_AND_expression .)
    RBRACE          reduce using rule 86 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 86 (logical_OR_expression -> logical_AND_expression .)
    RBRACKET        reduce using rule 86 (logical_OR_expression -> logical_AND_expression .)
    LAND            shift and go to state 116


state 54

    (126) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 126 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 126 (postfix_expression -> primary_expression .)
    INCREMENT       reduce using rule 126 (postfix_expression -> primary_expression .)
    DECREMENT       reduce using rule 126 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 126 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 126 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 126 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 126 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 126 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 126 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 126 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 126 (postfix_expression -> primary_expression .)
    LT              reduce using rule 126 (postfix_expression -> primary_expression .)
    GT              reduce using rule 126 (postfix_expression -> primary_expression .)
    LE              reduce using rule 126 (postfix_expression -> primary_expression .)
    GE              reduce using rule 126 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 126 (postfix_expression -> primary_expression .)
    NE              reduce using rule 126 (postfix_expression -> primary_expression .)
    AND             reduce using rule 126 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 126 (postfix_expression -> primary_expression .)
    OR              reduce using rule 126 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 126 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 126 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 126 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 126 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 126 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 126 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 126 (postfix_expression -> primary_expression .)


state 55

    (131) postfix_expression -> LPAREN . type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> LPAREN . type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (136) primary_expression -> LPAREN . expression RPAREN
    (115) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (55) type_name -> . specifier_qualifier_list
    (79) expression -> . assignment_expression
    (29) specifier_qualifier_list -> . type_specifier specifier_qualifier_listopt
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    type_name                      shift and go to state 117
    expression                     shift and go to state 118
    cast_expression                shift and go to state 52
    specifier_qualifier_list       shift and go to state 119
    assignment_expression          shift and go to state 100
    type_specifier                 shift and go to state 120
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 56

    (120) unary_operator -> AND .

    LPAREN          reduce using rule 120 (unary_operator -> AND .)
    INCREMENT       reduce using rule 120 (unary_operator -> AND .)
    DECREMENT       reduce using rule 120 (unary_operator -> AND .)
    AND             reduce using rule 120 (unary_operator -> AND .)
    TIMES           reduce using rule 120 (unary_operator -> AND .)
    PLUS            reduce using rule 120 (unary_operator -> AND .)
    MINUS           reduce using rule 120 (unary_operator -> AND .)
    NOT             reduce using rule 120 (unary_operator -> AND .)
    LNOT            reduce using rule 120 (unary_operator -> AND .)
    ID              reduce using rule 120 (unary_operator -> AND .)
    STRING          reduce using rule 120 (unary_operator -> AND .)
    INUM            reduce using rule 120 (unary_operator -> AND .)
    FNUM            reduce using rule 120 (unary_operator -> AND .)
    CHARACTER       reduce using rule 120 (unary_operator -> AND .)


state 57

    (121) unary_operator -> TIMES .

    LPAREN          reduce using rule 121 (unary_operator -> TIMES .)
    INCREMENT       reduce using rule 121 (unary_operator -> TIMES .)
    DECREMENT       reduce using rule 121 (unary_operator -> TIMES .)
    AND             reduce using rule 121 (unary_operator -> TIMES .)
    TIMES           reduce using rule 121 (unary_operator -> TIMES .)
    PLUS            reduce using rule 121 (unary_operator -> TIMES .)
    MINUS           reduce using rule 121 (unary_operator -> TIMES .)
    NOT             reduce using rule 121 (unary_operator -> TIMES .)
    LNOT            reduce using rule 121 (unary_operator -> TIMES .)
    ID              reduce using rule 121 (unary_operator -> TIMES .)
    STRING          reduce using rule 121 (unary_operator -> TIMES .)
    INUM            reduce using rule 121 (unary_operator -> TIMES .)
    FNUM            reduce using rule 121 (unary_operator -> TIMES .)
    CHARACTER       reduce using rule 121 (unary_operator -> TIMES .)


state 58

    (122) unary_operator -> PLUS .

    LPAREN          reduce using rule 122 (unary_operator -> PLUS .)
    INCREMENT       reduce using rule 122 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 122 (unary_operator -> PLUS .)
    AND             reduce using rule 122 (unary_operator -> PLUS .)
    TIMES           reduce using rule 122 (unary_operator -> PLUS .)
    PLUS            reduce using rule 122 (unary_operator -> PLUS .)
    MINUS           reduce using rule 122 (unary_operator -> PLUS .)
    NOT             reduce using rule 122 (unary_operator -> PLUS .)
    LNOT            reduce using rule 122 (unary_operator -> PLUS .)
    ID              reduce using rule 122 (unary_operator -> PLUS .)
    STRING          reduce using rule 122 (unary_operator -> PLUS .)
    INUM            reduce using rule 122 (unary_operator -> PLUS .)
    FNUM            reduce using rule 122 (unary_operator -> PLUS .)
    CHARACTER       reduce using rule 122 (unary_operator -> PLUS .)


state 59

    (123) unary_operator -> MINUS .

    LPAREN          reduce using rule 123 (unary_operator -> MINUS .)
    INCREMENT       reduce using rule 123 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 123 (unary_operator -> MINUS .)
    AND             reduce using rule 123 (unary_operator -> MINUS .)
    TIMES           reduce using rule 123 (unary_operator -> MINUS .)
    PLUS            reduce using rule 123 (unary_operator -> MINUS .)
    MINUS           reduce using rule 123 (unary_operator -> MINUS .)
    NOT             reduce using rule 123 (unary_operator -> MINUS .)
    LNOT            reduce using rule 123 (unary_operator -> MINUS .)
    ID              reduce using rule 123 (unary_operator -> MINUS .)
    STRING          reduce using rule 123 (unary_operator -> MINUS .)
    INUM            reduce using rule 123 (unary_operator -> MINUS .)
    FNUM            reduce using rule 123 (unary_operator -> MINUS .)
    CHARACTER       reduce using rule 123 (unary_operator -> MINUS .)


state 60

    (124) unary_operator -> NOT .

    LPAREN          reduce using rule 124 (unary_operator -> NOT .)
    INCREMENT       reduce using rule 124 (unary_operator -> NOT .)
    DECREMENT       reduce using rule 124 (unary_operator -> NOT .)
    AND             reduce using rule 124 (unary_operator -> NOT .)
    TIMES           reduce using rule 124 (unary_operator -> NOT .)
    PLUS            reduce using rule 124 (unary_operator -> NOT .)
    MINUS           reduce using rule 124 (unary_operator -> NOT .)
    NOT             reduce using rule 124 (unary_operator -> NOT .)
    LNOT            reduce using rule 124 (unary_operator -> NOT .)
    ID              reduce using rule 124 (unary_operator -> NOT .)
    STRING          reduce using rule 124 (unary_operator -> NOT .)
    INUM            reduce using rule 124 (unary_operator -> NOT .)
    FNUM            reduce using rule 124 (unary_operator -> NOT .)
    CHARACTER       reduce using rule 124 (unary_operator -> NOT .)


state 61

    (125) unary_operator -> LNOT .

    LPAREN          reduce using rule 125 (unary_operator -> LNOT .)
    INCREMENT       reduce using rule 125 (unary_operator -> LNOT .)
    DECREMENT       reduce using rule 125 (unary_operator -> LNOT .)
    AND             reduce using rule 125 (unary_operator -> LNOT .)
    TIMES           reduce using rule 125 (unary_operator -> LNOT .)
    PLUS            reduce using rule 125 (unary_operator -> LNOT .)
    MINUS           reduce using rule 125 (unary_operator -> LNOT .)
    NOT             reduce using rule 125 (unary_operator -> LNOT .)
    LNOT            reduce using rule 125 (unary_operator -> LNOT .)
    ID              reduce using rule 125 (unary_operator -> LNOT .)
    STRING          reduce using rule 125 (unary_operator -> LNOT .)
    INUM            reduce using rule 125 (unary_operator -> LNOT .)
    FNUM            reduce using rule 125 (unary_operator -> LNOT .)
    CHARACTER       reduce using rule 125 (unary_operator -> LNOT .)


state 62

    (88) logical_AND_expression -> inclusive_OR_expression .
    (91) inclusive_OR_expression -> inclusive_OR_expression . OR exclusive_OR_expression

    LAND            reduce using rule 88 (logical_AND_expression -> inclusive_OR_expression .)
    LOR             reduce using rule 88 (logical_AND_expression -> inclusive_OR_expression .)
    COMMA           reduce using rule 88 (logical_AND_expression -> inclusive_OR_expression .)
    SEMI            reduce using rule 88 (logical_AND_expression -> inclusive_OR_expression .)
    RBRACE          reduce using rule 88 (logical_AND_expression -> inclusive_OR_expression .)
    RPAREN          reduce using rule 88 (logical_AND_expression -> inclusive_OR_expression .)
    RBRACKET        reduce using rule 88 (logical_AND_expression -> inclusive_OR_expression .)
    OR              shift and go to state 121


state 63

    (133) primary_expression -> ID .

    LBRACKET        reduce using rule 133 (primary_expression -> ID .)
    LPAREN          reduce using rule 133 (primary_expression -> ID .)
    INCREMENT       reduce using rule 133 (primary_expression -> ID .)
    DECREMENT       reduce using rule 133 (primary_expression -> ID .)
    EQUALS          reduce using rule 133 (primary_expression -> ID .)
    TIMES           reduce using rule 133 (primary_expression -> ID .)
    DIVIDE          reduce using rule 133 (primary_expression -> ID .)
    MOD             reduce using rule 133 (primary_expression -> ID .)
    PLUS            reduce using rule 133 (primary_expression -> ID .)
    MINUS           reduce using rule 133 (primary_expression -> ID .)
    LSHIFT          reduce using rule 133 (primary_expression -> ID .)
    RSHIFT          reduce using rule 133 (primary_expression -> ID .)
    LT              reduce using rule 133 (primary_expression -> ID .)
    GT              reduce using rule 133 (primary_expression -> ID .)
    LE              reduce using rule 133 (primary_expression -> ID .)
    GE              reduce using rule 133 (primary_expression -> ID .)
    EQ              reduce using rule 133 (primary_expression -> ID .)
    NE              reduce using rule 133 (primary_expression -> ID .)
    AND             reduce using rule 133 (primary_expression -> ID .)
    XOR             reduce using rule 133 (primary_expression -> ID .)
    OR              reduce using rule 133 (primary_expression -> ID .)
    LAND            reduce using rule 133 (primary_expression -> ID .)
    LOR             reduce using rule 133 (primary_expression -> ID .)
    COMMA           reduce using rule 133 (primary_expression -> ID .)
    SEMI            reduce using rule 133 (primary_expression -> ID .)
    RBRACE          reduce using rule 133 (primary_expression -> ID .)
    RPAREN          reduce using rule 133 (primary_expression -> ID .)
    RBRACKET        reduce using rule 133 (primary_expression -> ID .)


state 64

    (134) primary_expression -> constant .

    LBRACKET        reduce using rule 134 (primary_expression -> constant .)
    LPAREN          reduce using rule 134 (primary_expression -> constant .)
    INCREMENT       reduce using rule 134 (primary_expression -> constant .)
    DECREMENT       reduce using rule 134 (primary_expression -> constant .)
    EQUALS          reduce using rule 134 (primary_expression -> constant .)
    TIMES           reduce using rule 134 (primary_expression -> constant .)
    DIVIDE          reduce using rule 134 (primary_expression -> constant .)
    MOD             reduce using rule 134 (primary_expression -> constant .)
    PLUS            reduce using rule 134 (primary_expression -> constant .)
    MINUS           reduce using rule 134 (primary_expression -> constant .)
    LSHIFT          reduce using rule 134 (primary_expression -> constant .)
    RSHIFT          reduce using rule 134 (primary_expression -> constant .)
    LT              reduce using rule 134 (primary_expression -> constant .)
    GT              reduce using rule 134 (primary_expression -> constant .)
    LE              reduce using rule 134 (primary_expression -> constant .)
    GE              reduce using rule 134 (primary_expression -> constant .)
    EQ              reduce using rule 134 (primary_expression -> constant .)
    NE              reduce using rule 134 (primary_expression -> constant .)
    AND             reduce using rule 134 (primary_expression -> constant .)
    XOR             reduce using rule 134 (primary_expression -> constant .)
    OR              reduce using rule 134 (primary_expression -> constant .)
    LAND            reduce using rule 134 (primary_expression -> constant .)
    LOR             reduce using rule 134 (primary_expression -> constant .)
    COMMA           reduce using rule 134 (primary_expression -> constant .)
    SEMI            reduce using rule 134 (primary_expression -> constant .)
    RBRACE          reduce using rule 134 (primary_expression -> constant .)
    RPAREN          reduce using rule 134 (primary_expression -> constant .)
    RBRACKET        reduce using rule 134 (primary_expression -> constant .)


state 65

    (135) primary_expression -> STRING .

    LBRACKET        reduce using rule 135 (primary_expression -> STRING .)
    LPAREN          reduce using rule 135 (primary_expression -> STRING .)
    INCREMENT       reduce using rule 135 (primary_expression -> STRING .)
    DECREMENT       reduce using rule 135 (primary_expression -> STRING .)
    EQUALS          reduce using rule 135 (primary_expression -> STRING .)
    TIMES           reduce using rule 135 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 135 (primary_expression -> STRING .)
    MOD             reduce using rule 135 (primary_expression -> STRING .)
    PLUS            reduce using rule 135 (primary_expression -> STRING .)
    MINUS           reduce using rule 135 (primary_expression -> STRING .)
    LSHIFT          reduce using rule 135 (primary_expression -> STRING .)
    RSHIFT          reduce using rule 135 (primary_expression -> STRING .)
    LT              reduce using rule 135 (primary_expression -> STRING .)
    GT              reduce using rule 135 (primary_expression -> STRING .)
    LE              reduce using rule 135 (primary_expression -> STRING .)
    GE              reduce using rule 135 (primary_expression -> STRING .)
    EQ              reduce using rule 135 (primary_expression -> STRING .)
    NE              reduce using rule 135 (primary_expression -> STRING .)
    AND             reduce using rule 135 (primary_expression -> STRING .)
    XOR             reduce using rule 135 (primary_expression -> STRING .)
    OR              reduce using rule 135 (primary_expression -> STRING .)
    LAND            reduce using rule 135 (primary_expression -> STRING .)
    LOR             reduce using rule 135 (primary_expression -> STRING .)
    COMMA           reduce using rule 135 (primary_expression -> STRING .)
    SEMI            reduce using rule 135 (primary_expression -> STRING .)
    RBRACE          reduce using rule 135 (primary_expression -> STRING .)
    RPAREN          reduce using rule 135 (primary_expression -> STRING .)
    RBRACKET        reduce using rule 135 (primary_expression -> STRING .)


state 66

    (90) inclusive_OR_expression -> exclusive_OR_expression .
    (93) exclusive_OR_expression -> exclusive_OR_expression . XOR AND_expression

    OR              reduce using rule 90 (inclusive_OR_expression -> exclusive_OR_expression .)
    LAND            reduce using rule 90 (inclusive_OR_expression -> exclusive_OR_expression .)
    LOR             reduce using rule 90 (inclusive_OR_expression -> exclusive_OR_expression .)
    COMMA           reduce using rule 90 (inclusive_OR_expression -> exclusive_OR_expression .)
    SEMI            reduce using rule 90 (inclusive_OR_expression -> exclusive_OR_expression .)
    RBRACE          reduce using rule 90 (inclusive_OR_expression -> exclusive_OR_expression .)
    RPAREN          reduce using rule 90 (inclusive_OR_expression -> exclusive_OR_expression .)
    RBRACKET        reduce using rule 90 (inclusive_OR_expression -> exclusive_OR_expression .)
    XOR             shift and go to state 122


state 67

    (141) constant -> INUM .

    LBRACKET        reduce using rule 141 (constant -> INUM .)
    LPAREN          reduce using rule 141 (constant -> INUM .)
    INCREMENT       reduce using rule 141 (constant -> INUM .)
    DECREMENT       reduce using rule 141 (constant -> INUM .)
    EQUALS          reduce using rule 141 (constant -> INUM .)
    TIMES           reduce using rule 141 (constant -> INUM .)
    DIVIDE          reduce using rule 141 (constant -> INUM .)
    MOD             reduce using rule 141 (constant -> INUM .)
    PLUS            reduce using rule 141 (constant -> INUM .)
    MINUS           reduce using rule 141 (constant -> INUM .)
    LSHIFT          reduce using rule 141 (constant -> INUM .)
    RSHIFT          reduce using rule 141 (constant -> INUM .)
    LT              reduce using rule 141 (constant -> INUM .)
    GT              reduce using rule 141 (constant -> INUM .)
    LE              reduce using rule 141 (constant -> INUM .)
    GE              reduce using rule 141 (constant -> INUM .)
    EQ              reduce using rule 141 (constant -> INUM .)
    NE              reduce using rule 141 (constant -> INUM .)
    AND             reduce using rule 141 (constant -> INUM .)
    XOR             reduce using rule 141 (constant -> INUM .)
    OR              reduce using rule 141 (constant -> INUM .)
    LAND            reduce using rule 141 (constant -> INUM .)
    LOR             reduce using rule 141 (constant -> INUM .)
    COMMA           reduce using rule 141 (constant -> INUM .)
    SEMI            reduce using rule 141 (constant -> INUM .)
    RBRACE          reduce using rule 141 (constant -> INUM .)
    RPAREN          reduce using rule 141 (constant -> INUM .)
    RBRACKET        reduce using rule 141 (constant -> INUM .)


state 68

    (142) constant -> FNUM .

    LBRACKET        reduce using rule 142 (constant -> FNUM .)
    LPAREN          reduce using rule 142 (constant -> FNUM .)
    INCREMENT       reduce using rule 142 (constant -> FNUM .)
    DECREMENT       reduce using rule 142 (constant -> FNUM .)
    EQUALS          reduce using rule 142 (constant -> FNUM .)
    TIMES           reduce using rule 142 (constant -> FNUM .)
    DIVIDE          reduce using rule 142 (constant -> FNUM .)
    MOD             reduce using rule 142 (constant -> FNUM .)
    PLUS            reduce using rule 142 (constant -> FNUM .)
    MINUS           reduce using rule 142 (constant -> FNUM .)
    LSHIFT          reduce using rule 142 (constant -> FNUM .)
    RSHIFT          reduce using rule 142 (constant -> FNUM .)
    LT              reduce using rule 142 (constant -> FNUM .)
    GT              reduce using rule 142 (constant -> FNUM .)
    LE              reduce using rule 142 (constant -> FNUM .)
    GE              reduce using rule 142 (constant -> FNUM .)
    EQ              reduce using rule 142 (constant -> FNUM .)
    NE              reduce using rule 142 (constant -> FNUM .)
    AND             reduce using rule 142 (constant -> FNUM .)
    XOR             reduce using rule 142 (constant -> FNUM .)
    OR              reduce using rule 142 (constant -> FNUM .)
    LAND            reduce using rule 142 (constant -> FNUM .)
    LOR             reduce using rule 142 (constant -> FNUM .)
    COMMA           reduce using rule 142 (constant -> FNUM .)
    SEMI            reduce using rule 142 (constant -> FNUM .)
    RBRACE          reduce using rule 142 (constant -> FNUM .)
    RPAREN          reduce using rule 142 (constant -> FNUM .)
    RBRACKET        reduce using rule 142 (constant -> FNUM .)


state 69

    (143) constant -> CHARACTER .

    LBRACKET        reduce using rule 143 (constant -> CHARACTER .)
    LPAREN          reduce using rule 143 (constant -> CHARACTER .)
    INCREMENT       reduce using rule 143 (constant -> CHARACTER .)
    DECREMENT       reduce using rule 143 (constant -> CHARACTER .)
    EQUALS          reduce using rule 143 (constant -> CHARACTER .)
    TIMES           reduce using rule 143 (constant -> CHARACTER .)
    DIVIDE          reduce using rule 143 (constant -> CHARACTER .)
    MOD             reduce using rule 143 (constant -> CHARACTER .)
    PLUS            reduce using rule 143 (constant -> CHARACTER .)
    MINUS           reduce using rule 143 (constant -> CHARACTER .)
    LSHIFT          reduce using rule 143 (constant -> CHARACTER .)
    RSHIFT          reduce using rule 143 (constant -> CHARACTER .)
    LT              reduce using rule 143 (constant -> CHARACTER .)
    GT              reduce using rule 143 (constant -> CHARACTER .)
    LE              reduce using rule 143 (constant -> CHARACTER .)
    GE              reduce using rule 143 (constant -> CHARACTER .)
    EQ              reduce using rule 143 (constant -> CHARACTER .)
    NE              reduce using rule 143 (constant -> CHARACTER .)
    AND             reduce using rule 143 (constant -> CHARACTER .)
    XOR             reduce using rule 143 (constant -> CHARACTER .)
    OR              reduce using rule 143 (constant -> CHARACTER .)
    LAND            reduce using rule 143 (constant -> CHARACTER .)
    LOR             reduce using rule 143 (constant -> CHARACTER .)
    COMMA           reduce using rule 143 (constant -> CHARACTER .)
    SEMI            reduce using rule 143 (constant -> CHARACTER .)
    RBRACE          reduce using rule 143 (constant -> CHARACTER .)
    RPAREN          reduce using rule 143 (constant -> CHARACTER .)
    RBRACKET        reduce using rule 143 (constant -> CHARACTER .)


state 70

    (92) exclusive_OR_expression -> AND_expression .
    (95) AND_expression -> AND_expression . AND equality_expression

    XOR             reduce using rule 92 (exclusive_OR_expression -> AND_expression .)
    OR              reduce using rule 92 (exclusive_OR_expression -> AND_expression .)
    LAND            reduce using rule 92 (exclusive_OR_expression -> AND_expression .)
    LOR             reduce using rule 92 (exclusive_OR_expression -> AND_expression .)
    COMMA           reduce using rule 92 (exclusive_OR_expression -> AND_expression .)
    SEMI            reduce using rule 92 (exclusive_OR_expression -> AND_expression .)
    RBRACE          reduce using rule 92 (exclusive_OR_expression -> AND_expression .)
    RPAREN          reduce using rule 92 (exclusive_OR_expression -> AND_expression .)
    RBRACKET        reduce using rule 92 (exclusive_OR_expression -> AND_expression .)
    AND             shift and go to state 123


state 71

    (94) AND_expression -> equality_expression .
    (97) equality_expression -> equality_expression . EQ relational_expression
    (98) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 94 (AND_expression -> equality_expression .)
    XOR             reduce using rule 94 (AND_expression -> equality_expression .)
    OR              reduce using rule 94 (AND_expression -> equality_expression .)
    LAND            reduce using rule 94 (AND_expression -> equality_expression .)
    LOR             reduce using rule 94 (AND_expression -> equality_expression .)
    COMMA           reduce using rule 94 (AND_expression -> equality_expression .)
    SEMI            reduce using rule 94 (AND_expression -> equality_expression .)
    RBRACE          reduce using rule 94 (AND_expression -> equality_expression .)
    RPAREN          reduce using rule 94 (AND_expression -> equality_expression .)
    RBRACKET        reduce using rule 94 (AND_expression -> equality_expression .)
    EQ              shift and go to state 124
    NE              shift and go to state 125


state 72

    (96) equality_expression -> relational_expression .
    (100) relational_expression -> relational_expression . LT shift_expression
    (101) relational_expression -> relational_expression . GT shift_expression
    (102) relational_expression -> relational_expression . LE shift_expression
    (103) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 96 (equality_expression -> relational_expression .)
    NE              reduce using rule 96 (equality_expression -> relational_expression .)
    AND             reduce using rule 96 (equality_expression -> relational_expression .)
    XOR             reduce using rule 96 (equality_expression -> relational_expression .)
    OR              reduce using rule 96 (equality_expression -> relational_expression .)
    LAND            reduce using rule 96 (equality_expression -> relational_expression .)
    LOR             reduce using rule 96 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 96 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 96 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 96 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 96 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 96 (equality_expression -> relational_expression .)
    LT              shift and go to state 126
    GT              shift and go to state 127
    LE              shift and go to state 128
    GE              shift and go to state 129


state 73

    (99) relational_expression -> shift_expression .
    (105) shift_expression -> shift_expression . LSHIFT additive_expression
    (106) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 99 (relational_expression -> shift_expression .)
    GT              reduce using rule 99 (relational_expression -> shift_expression .)
    LE              reduce using rule 99 (relational_expression -> shift_expression .)
    GE              reduce using rule 99 (relational_expression -> shift_expression .)
    EQ              reduce using rule 99 (relational_expression -> shift_expression .)
    NE              reduce using rule 99 (relational_expression -> shift_expression .)
    AND             reduce using rule 99 (relational_expression -> shift_expression .)
    XOR             reduce using rule 99 (relational_expression -> shift_expression .)
    OR              reduce using rule 99 (relational_expression -> shift_expression .)
    LAND            reduce using rule 99 (relational_expression -> shift_expression .)
    LOR             reduce using rule 99 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 99 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 99 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 99 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 99 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 99 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 130
    RSHIFT          shift and go to state 131


state 74

    (104) shift_expression -> additive_expression .
    (108) additive_expression -> additive_expression . PLUS multiplicative_expression
    (109) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 104 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 104 (shift_expression -> additive_expression .)
    LT              reduce using rule 104 (shift_expression -> additive_expression .)
    GT              reduce using rule 104 (shift_expression -> additive_expression .)
    LE              reduce using rule 104 (shift_expression -> additive_expression .)
    GE              reduce using rule 104 (shift_expression -> additive_expression .)
    EQ              reduce using rule 104 (shift_expression -> additive_expression .)
    NE              reduce using rule 104 (shift_expression -> additive_expression .)
    AND             reduce using rule 104 (shift_expression -> additive_expression .)
    XOR             reduce using rule 104 (shift_expression -> additive_expression .)
    OR              reduce using rule 104 (shift_expression -> additive_expression .)
    LAND            reduce using rule 104 (shift_expression -> additive_expression .)
    LOR             reduce using rule 104 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 104 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 104 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 104 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 104 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 104 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 132
    MINUS           shift and go to state 133


state 75

    (107) additive_expression -> multiplicative_expression .
    (111) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (112) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (113) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 107 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 107 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 107 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 107 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 107 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 107 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 107 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 107 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 107 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 107 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 107 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 107 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 107 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 107 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 107 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 107 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 107 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 107 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 107 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 107 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 134
    DIVIDE          shift and go to state 135
    MOD             shift and go to state 136


state 76

    (10) declaration_list -> declaration_list declaration .

    EXTERN          reduce using rule 10 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 10 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 10 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 10 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 10 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 10 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 10 (declaration_list -> declaration_list declaration .)


state 77

    (33) direct_declarator -> direct_declarator LBRACKET . assignment_expressionopt RBRACKET
    (34) direct_declarator -> direct_declarator LBRACKET . STATIC assignment_expression RBRACKET
    (35) direct_declarator -> direct_declarator LBRACKET . TIMES RBRACKET
    (80) assignment_expressionopt -> . assignment_expression
    (81) assignment_expressionopt -> . empty
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (144) empty -> .
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    STATIC          shift and go to state 138
    TIMES           shift and go to state 140
    RBRACKET        reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    assignment_expressionopt       shift and go to state 137
    assignment_expression          shift and go to state 139
    empty                          shift and go to state 141
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 78

    (36) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (37) direct_declarator -> direct_declarator LPAREN . identifier_listopt RPAREN
    (56) parameter_type_list -> . parameter_list
    (46) identifier_listopt -> . identifier_list
    (47) identifier_listopt -> . empty
    (42) parameter_list -> . parameter_declaration
    (43) parameter_list -> . parameter_list COMMA parameter_declaration
    (48) identifier_list -> . ID
    (49) identifier_list -> . identifier_list COMMA ID
    (144) empty -> .
    (44) parameter_declaration -> . declaration_specifiers declarator
    (45) parameter_declaration -> . declaration_specifiers
    (13) declaration_specifiers -> . storage_class_specifier declaration_specifiersopt
    (14) declaration_specifiers -> . type_specifier declaration_specifiersopt
    (15) storage_class_specifier -> . EXTERN
    (16) storage_class_specifier -> . STATIC
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT

    ID              shift and go to state 148
    RPAREN          reduce using rule 144 (empty -> .)
    EXTERN          shift and go to state 8
    STATIC          shift and go to state 9
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    parameter_type_list            shift and go to state 142
    identifier_listopt             shift and go to state 143
    parameter_list                 shift and go to state 144
    identifier_list                shift and go to state 145
    empty                          shift and go to state 146
    parameter_declaration          shift and go to state 147
    declaration_specifiers         shift and go to state 149
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7

state 79

    (32) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 150


state 80

    (39) pointeropt -> empty .

    ID              reduce using rule 39 (pointeropt -> empty .)
    LPAREN          reduce using rule 39 (pointeropt -> empty .)


state 81

    (24) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 24 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 24 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 82

    (69) compound_statement -> LBRACE block_item_listopt . RBRACE

    RBRACE          shift and go to state 151


state 83

    (70) block_item_listopt -> block_item_list .
    (73) block_item_list -> block_item_list . block_item
    (74) block_item -> . declaration
    (75) block_item -> . statement
    (6) declaration -> . declaration_specifiers init_declarator_listopt SEMI
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (13) declaration_specifiers -> . storage_class_specifier declaration_specifiersopt
    (14) declaration_specifiers -> . type_specifier declaration_specifiersopt
    (62) selection_statement -> . IF LPAREN expression RPAREN statement
    (63) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (64) iteration_statement -> . FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement
    (65) iteration_statement -> . FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement
    (66) jump_statement -> . RETURN expressionopt SEMI
    (67) jump_statement -> . BREAK SEMI
    (68) jump_statement -> . CONTINUE SEMI
    (69) compound_statement -> . LBRACE block_item_listopt RBRACE
    (76) expression_statement -> . expressionopt SEMI
    (15) storage_class_specifier -> . EXTERN
    (16) storage_class_specifier -> . STATIC
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (79) expression -> . assignment_expression
    (144) empty -> .
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          reduce using rule 70 (block_item_listopt -> block_item_list .)
    IF              shift and go to state 93
    FOR             shift and go to state 95
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 41
    EXTERN          shift and go to state 8
    STATIC          shift and go to state 9
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    SEMI            reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    block_item                     shift and go to state 152
    declaration                    shift and go to state 86
    statement                      shift and go to state 87
    declaration_specifiers         shift and go to state 27
    selection_statement            shift and go to state 88
    iteration_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    compound_statement             shift and go to state 91
    expression_statement           shift and go to state 92
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    expression                     shift and go to state 94
    expressionopt                  shift and go to state 96
    empty                          shift and go to state 153
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 84

    (71) block_item_listopt -> empty .
    (78) expressionopt -> empty .

    RBRACE          reduce using rule 71 (block_item_listopt -> empty .)
    SEMI            reduce using rule 78 (expressionopt -> empty .)


state 85

    (72) block_item_list -> block_item .

    IF              reduce using rule 72 (block_item_list -> block_item .)
    FOR             reduce using rule 72 (block_item_list -> block_item .)
    RETURN          reduce using rule 72 (block_item_list -> block_item .)
    BREAK           reduce using rule 72 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 72 (block_item_list -> block_item .)
    LBRACE          reduce using rule 72 (block_item_list -> block_item .)
    EXTERN          reduce using rule 72 (block_item_list -> block_item .)
    STATIC          reduce using rule 72 (block_item_list -> block_item .)
    VOID            reduce using rule 72 (block_item_list -> block_item .)
    CHAR            reduce using rule 72 (block_item_list -> block_item .)
    INT             reduce using rule 72 (block_item_list -> block_item .)
    FLOAT           reduce using rule 72 (block_item_list -> block_item .)
    INCREMENT       reduce using rule 72 (block_item_list -> block_item .)
    DECREMENT       reduce using rule 72 (block_item_list -> block_item .)
    LPAREN          reduce using rule 72 (block_item_list -> block_item .)
    AND             reduce using rule 72 (block_item_list -> block_item .)
    TIMES           reduce using rule 72 (block_item_list -> block_item .)
    PLUS            reduce using rule 72 (block_item_list -> block_item .)
    MINUS           reduce using rule 72 (block_item_list -> block_item .)
    NOT             reduce using rule 72 (block_item_list -> block_item .)
    LNOT            reduce using rule 72 (block_item_list -> block_item .)
    ID              reduce using rule 72 (block_item_list -> block_item .)
    STRING          reduce using rule 72 (block_item_list -> block_item .)
    INUM            reduce using rule 72 (block_item_list -> block_item .)
    FNUM            reduce using rule 72 (block_item_list -> block_item .)
    CHARACTER       reduce using rule 72 (block_item_list -> block_item .)
    SEMI            reduce using rule 72 (block_item_list -> block_item .)
    RBRACE          reduce using rule 72 (block_item_list -> block_item .)


state 86

    (74) block_item -> declaration .

    IF              reduce using rule 74 (block_item -> declaration .)
    FOR             reduce using rule 74 (block_item -> declaration .)
    RETURN          reduce using rule 74 (block_item -> declaration .)
    BREAK           reduce using rule 74 (block_item -> declaration .)
    CONTINUE        reduce using rule 74 (block_item -> declaration .)
    LBRACE          reduce using rule 74 (block_item -> declaration .)
    EXTERN          reduce using rule 74 (block_item -> declaration .)
    STATIC          reduce using rule 74 (block_item -> declaration .)
    VOID            reduce using rule 74 (block_item -> declaration .)
    CHAR            reduce using rule 74 (block_item -> declaration .)
    INT             reduce using rule 74 (block_item -> declaration .)
    FLOAT           reduce using rule 74 (block_item -> declaration .)
    INCREMENT       reduce using rule 74 (block_item -> declaration .)
    DECREMENT       reduce using rule 74 (block_item -> declaration .)
    LPAREN          reduce using rule 74 (block_item -> declaration .)
    AND             reduce using rule 74 (block_item -> declaration .)
    TIMES           reduce using rule 74 (block_item -> declaration .)
    PLUS            reduce using rule 74 (block_item -> declaration .)
    MINUS           reduce using rule 74 (block_item -> declaration .)
    NOT             reduce using rule 74 (block_item -> declaration .)
    LNOT            reduce using rule 74 (block_item -> declaration .)
    ID              reduce using rule 74 (block_item -> declaration .)
    STRING          reduce using rule 74 (block_item -> declaration .)
    INUM            reduce using rule 74 (block_item -> declaration .)
    FNUM            reduce using rule 74 (block_item -> declaration .)
    CHARACTER       reduce using rule 74 (block_item -> declaration .)
    SEMI            reduce using rule 74 (block_item -> declaration .)
    RBRACE          reduce using rule 74 (block_item -> declaration .)


state 87

    (75) block_item -> statement .

    IF              reduce using rule 75 (block_item -> statement .)
    FOR             reduce using rule 75 (block_item -> statement .)
    RETURN          reduce using rule 75 (block_item -> statement .)
    BREAK           reduce using rule 75 (block_item -> statement .)
    CONTINUE        reduce using rule 75 (block_item -> statement .)
    LBRACE          reduce using rule 75 (block_item -> statement .)
    EXTERN          reduce using rule 75 (block_item -> statement .)
    STATIC          reduce using rule 75 (block_item -> statement .)
    VOID            reduce using rule 75 (block_item -> statement .)
    CHAR            reduce using rule 75 (block_item -> statement .)
    INT             reduce using rule 75 (block_item -> statement .)
    FLOAT           reduce using rule 75 (block_item -> statement .)
    INCREMENT       reduce using rule 75 (block_item -> statement .)
    DECREMENT       reduce using rule 75 (block_item -> statement .)
    LPAREN          reduce using rule 75 (block_item -> statement .)
    AND             reduce using rule 75 (block_item -> statement .)
    TIMES           reduce using rule 75 (block_item -> statement .)
    PLUS            reduce using rule 75 (block_item -> statement .)
    MINUS           reduce using rule 75 (block_item -> statement .)
    NOT             reduce using rule 75 (block_item -> statement .)
    LNOT            reduce using rule 75 (block_item -> statement .)
    ID              reduce using rule 75 (block_item -> statement .)
    STRING          reduce using rule 75 (block_item -> statement .)
    INUM            reduce using rule 75 (block_item -> statement .)
    FNUM            reduce using rule 75 (block_item -> statement .)
    CHARACTER       reduce using rule 75 (block_item -> statement .)
    SEMI            reduce using rule 75 (block_item -> statement .)
    RBRACE          reduce using rule 75 (block_item -> statement .)


state 88

    (57) statement -> selection_statement .

    IF              reduce using rule 57 (statement -> selection_statement .)
    FOR             reduce using rule 57 (statement -> selection_statement .)
    RETURN          reduce using rule 57 (statement -> selection_statement .)
    BREAK           reduce using rule 57 (statement -> selection_statement .)
    CONTINUE        reduce using rule 57 (statement -> selection_statement .)
    LBRACE          reduce using rule 57 (statement -> selection_statement .)
    EXTERN          reduce using rule 57 (statement -> selection_statement .)
    STATIC          reduce using rule 57 (statement -> selection_statement .)
    VOID            reduce using rule 57 (statement -> selection_statement .)
    CHAR            reduce using rule 57 (statement -> selection_statement .)
    INT             reduce using rule 57 (statement -> selection_statement .)
    FLOAT           reduce using rule 57 (statement -> selection_statement .)
    INCREMENT       reduce using rule 57 (statement -> selection_statement .)
    DECREMENT       reduce using rule 57 (statement -> selection_statement .)
    LPAREN          reduce using rule 57 (statement -> selection_statement .)
    AND             reduce using rule 57 (statement -> selection_statement .)
    TIMES           reduce using rule 57 (statement -> selection_statement .)
    PLUS            reduce using rule 57 (statement -> selection_statement .)
    MINUS           reduce using rule 57 (statement -> selection_statement .)
    NOT             reduce using rule 57 (statement -> selection_statement .)
    LNOT            reduce using rule 57 (statement -> selection_statement .)
    ID              reduce using rule 57 (statement -> selection_statement .)
    STRING          reduce using rule 57 (statement -> selection_statement .)
    INUM            reduce using rule 57 (statement -> selection_statement .)
    FNUM            reduce using rule 57 (statement -> selection_statement .)
    CHARACTER       reduce using rule 57 (statement -> selection_statement .)
    SEMI            reduce using rule 57 (statement -> selection_statement .)
    RBRACE          reduce using rule 57 (statement -> selection_statement .)
    ELSE            reduce using rule 57 (statement -> selection_statement .)


state 89

    (58) statement -> iteration_statement .

    IF              reduce using rule 58 (statement -> iteration_statement .)
    FOR             reduce using rule 58 (statement -> iteration_statement .)
    RETURN          reduce using rule 58 (statement -> iteration_statement .)
    BREAK           reduce using rule 58 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 58 (statement -> iteration_statement .)
    LBRACE          reduce using rule 58 (statement -> iteration_statement .)
    EXTERN          reduce using rule 58 (statement -> iteration_statement .)
    STATIC          reduce using rule 58 (statement -> iteration_statement .)
    VOID            reduce using rule 58 (statement -> iteration_statement .)
    CHAR            reduce using rule 58 (statement -> iteration_statement .)
    INT             reduce using rule 58 (statement -> iteration_statement .)
    FLOAT           reduce using rule 58 (statement -> iteration_statement .)
    INCREMENT       reduce using rule 58 (statement -> iteration_statement .)
    DECREMENT       reduce using rule 58 (statement -> iteration_statement .)
    LPAREN          reduce using rule 58 (statement -> iteration_statement .)
    AND             reduce using rule 58 (statement -> iteration_statement .)
    TIMES           reduce using rule 58 (statement -> iteration_statement .)
    PLUS            reduce using rule 58 (statement -> iteration_statement .)
    MINUS           reduce using rule 58 (statement -> iteration_statement .)
    NOT             reduce using rule 58 (statement -> iteration_statement .)
    LNOT            reduce using rule 58 (statement -> iteration_statement .)
    ID              reduce using rule 58 (statement -> iteration_statement .)
    STRING          reduce using rule 58 (statement -> iteration_statement .)
    INUM            reduce using rule 58 (statement -> iteration_statement .)
    FNUM            reduce using rule 58 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 58 (statement -> iteration_statement .)
    SEMI            reduce using rule 58 (statement -> iteration_statement .)
    RBRACE          reduce using rule 58 (statement -> iteration_statement .)
    ELSE            reduce using rule 58 (statement -> iteration_statement .)


state 90

    (59) statement -> jump_statement .

    IF              reduce using rule 59 (statement -> jump_statement .)
    FOR             reduce using rule 59 (statement -> jump_statement .)
    RETURN          reduce using rule 59 (statement -> jump_statement .)
    BREAK           reduce using rule 59 (statement -> jump_statement .)
    CONTINUE        reduce using rule 59 (statement -> jump_statement .)
    LBRACE          reduce using rule 59 (statement -> jump_statement .)
    EXTERN          reduce using rule 59 (statement -> jump_statement .)
    STATIC          reduce using rule 59 (statement -> jump_statement .)
    VOID            reduce using rule 59 (statement -> jump_statement .)
    CHAR            reduce using rule 59 (statement -> jump_statement .)
    INT             reduce using rule 59 (statement -> jump_statement .)
    FLOAT           reduce using rule 59 (statement -> jump_statement .)
    INCREMENT       reduce using rule 59 (statement -> jump_statement .)
    DECREMENT       reduce using rule 59 (statement -> jump_statement .)
    LPAREN          reduce using rule 59 (statement -> jump_statement .)
    AND             reduce using rule 59 (statement -> jump_statement .)
    TIMES           reduce using rule 59 (statement -> jump_statement .)
    PLUS            reduce using rule 59 (statement -> jump_statement .)
    MINUS           reduce using rule 59 (statement -> jump_statement .)
    NOT             reduce using rule 59 (statement -> jump_statement .)
    LNOT            reduce using rule 59 (statement -> jump_statement .)
    ID              reduce using rule 59 (statement -> jump_statement .)
    STRING          reduce using rule 59 (statement -> jump_statement .)
    INUM            reduce using rule 59 (statement -> jump_statement .)
    FNUM            reduce using rule 59 (statement -> jump_statement .)
    CHARACTER       reduce using rule 59 (statement -> jump_statement .)
    SEMI            reduce using rule 59 (statement -> jump_statement .)
    RBRACE          reduce using rule 59 (statement -> jump_statement .)
    ELSE            reduce using rule 59 (statement -> jump_statement .)


state 91

    (60) statement -> compound_statement .

    IF              reduce using rule 60 (statement -> compound_statement .)
    FOR             reduce using rule 60 (statement -> compound_statement .)
    RETURN          reduce using rule 60 (statement -> compound_statement .)
    BREAK           reduce using rule 60 (statement -> compound_statement .)
    CONTINUE        reduce using rule 60 (statement -> compound_statement .)
    LBRACE          reduce using rule 60 (statement -> compound_statement .)
    EXTERN          reduce using rule 60 (statement -> compound_statement .)
    STATIC          reduce using rule 60 (statement -> compound_statement .)
    VOID            reduce using rule 60 (statement -> compound_statement .)
    CHAR            reduce using rule 60 (statement -> compound_statement .)
    INT             reduce using rule 60 (statement -> compound_statement .)
    FLOAT           reduce using rule 60 (statement -> compound_statement .)
    INCREMENT       reduce using rule 60 (statement -> compound_statement .)
    DECREMENT       reduce using rule 60 (statement -> compound_statement .)
    LPAREN          reduce using rule 60 (statement -> compound_statement .)
    AND             reduce using rule 60 (statement -> compound_statement .)
    TIMES           reduce using rule 60 (statement -> compound_statement .)
    PLUS            reduce using rule 60 (statement -> compound_statement .)
    MINUS           reduce using rule 60 (statement -> compound_statement .)
    NOT             reduce using rule 60 (statement -> compound_statement .)
    LNOT            reduce using rule 60 (statement -> compound_statement .)
    ID              reduce using rule 60 (statement -> compound_statement .)
    STRING          reduce using rule 60 (statement -> compound_statement .)
    INUM            reduce using rule 60 (statement -> compound_statement .)
    FNUM            reduce using rule 60 (statement -> compound_statement .)
    CHARACTER       reduce using rule 60 (statement -> compound_statement .)
    SEMI            reduce using rule 60 (statement -> compound_statement .)
    RBRACE          reduce using rule 60 (statement -> compound_statement .)
    ELSE            reduce using rule 60 (statement -> compound_statement .)


state 92

    (61) statement -> expression_statement .

    IF              reduce using rule 61 (statement -> expression_statement .)
    FOR             reduce using rule 61 (statement -> expression_statement .)
    RETURN          reduce using rule 61 (statement -> expression_statement .)
    BREAK           reduce using rule 61 (statement -> expression_statement .)
    CONTINUE        reduce using rule 61 (statement -> expression_statement .)
    LBRACE          reduce using rule 61 (statement -> expression_statement .)
    EXTERN          reduce using rule 61 (statement -> expression_statement .)
    STATIC          reduce using rule 61 (statement -> expression_statement .)
    VOID            reduce using rule 61 (statement -> expression_statement .)
    CHAR            reduce using rule 61 (statement -> expression_statement .)
    INT             reduce using rule 61 (statement -> expression_statement .)
    FLOAT           reduce using rule 61 (statement -> expression_statement .)
    INCREMENT       reduce using rule 61 (statement -> expression_statement .)
    DECREMENT       reduce using rule 61 (statement -> expression_statement .)
    LPAREN          reduce using rule 61 (statement -> expression_statement .)
    AND             reduce using rule 61 (statement -> expression_statement .)
    TIMES           reduce using rule 61 (statement -> expression_statement .)
    PLUS            reduce using rule 61 (statement -> expression_statement .)
    MINUS           reduce using rule 61 (statement -> expression_statement .)
    NOT             reduce using rule 61 (statement -> expression_statement .)
    LNOT            reduce using rule 61 (statement -> expression_statement .)
    ID              reduce using rule 61 (statement -> expression_statement .)
    STRING          reduce using rule 61 (statement -> expression_statement .)
    INUM            reduce using rule 61 (statement -> expression_statement .)
    FNUM            reduce using rule 61 (statement -> expression_statement .)
    CHARACTER       reduce using rule 61 (statement -> expression_statement .)
    SEMI            reduce using rule 61 (statement -> expression_statement .)
    RBRACE          reduce using rule 61 (statement -> expression_statement .)
    ELSE            reduce using rule 61 (statement -> expression_statement .)


state 93

    (62) selection_statement -> IF . LPAREN expression RPAREN statement
    (63) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 154


state 94

    (77) expressionopt -> expression .

    SEMI            reduce using rule 77 (expressionopt -> expression .)
    RPAREN          reduce using rule 77 (expressionopt -> expression .)


state 95

    (64) iteration_statement -> FOR . LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement
    (65) iteration_statement -> FOR . LPAREN declaration expressionopt SEMI expressionopt RPAREN statement

    LPAREN          shift and go to state 155


state 96

    (76) expression_statement -> expressionopt . SEMI

    SEMI            shift and go to state 156


state 97

    (66) jump_statement -> RETURN . expressionopt SEMI
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (79) expression -> . assignment_expression
    (144) empty -> .
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    expressionopt                  shift and go to state 157
    expression                     shift and go to state 94
    empty                          shift and go to state 153
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 98

    (67) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 158


state 99

    (68) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 159


state 100

    (79) expression -> assignment_expression .

    SEMI            reduce using rule 79 (expression -> assignment_expression .)
    RPAREN          reduce using rule 79 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 79 (expression -> assignment_expression .)


state 101

    (51) initializer -> LBRACE initializer_list . RBRACE
    (52) initializer -> LBRACE initializer_list . COMMA RBRACE
    (54) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 160
    COMMA           shift and go to state 161


state 102

    (53) initializer_list -> initializer .

    RBRACE          reduce using rule 53 (initializer_list -> initializer .)
    COMMA           reduce using rule 53 (initializer_list -> initializer .)
    RBRACKET        reduce using rule 53 (initializer_list -> initializer .)


state 103

    (83) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    unary_expression               shift and go to state 46
    assignment_expression          shift and go to state 162
    conditional_expression         shift and go to state 45
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 104

    (84) assignment_operator -> EQUALS .

    INCREMENT       reduce using rule 84 (assignment_operator -> EQUALS .)
    DECREMENT       reduce using rule 84 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 84 (assignment_operator -> EQUALS .)
    AND             reduce using rule 84 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 84 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 84 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 84 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 84 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 84 (assignment_operator -> EQUALS .)
    ID              reduce using rule 84 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 84 (assignment_operator -> EQUALS .)
    INUM            reduce using rule 84 (assignment_operator -> EQUALS .)
    FNUM            reduce using rule 84 (assignment_operator -> EQUALS .)
    CHARACTER       reduce using rule 84 (assignment_operator -> EQUALS .)


state 105

    (87) logical_OR_expression -> logical_OR_expression LOR . logical_AND_expression
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    logical_AND_expression         shift and go to state 163
    inclusive_OR_expression        shift and go to state 62
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 106

    (127) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (79) expression -> . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    postfix_expression             shift and go to state 48
    expression                     shift and go to state 164
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 107

    (128) postfix_expression -> postfix_expression LPAREN . argument_expression_listopt RPAREN
    (137) argument_expression_listopt -> . argument_expression_list
    (138) argument_expression_listopt -> . empty
    (139) argument_expression_list -> . assignment_expression
    (140) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (144) empty -> .
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    postfix_expression             shift and go to state 48
    argument_expression_listopt    shift and go to state 165
    argument_expression_list       shift and go to state 166
    empty                          shift and go to state 167
    assignment_expression          shift and go to state 168
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 108

    (129) postfix_expression -> postfix_expression INCREMENT .

    LBRACKET        reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    LPAREN          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    INCREMENT       reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    DECREMENT       reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    EQUALS          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    TIMES           reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDE          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    MOD             reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    PLUS            reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    MINUS           reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    LSHIFT          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    RSHIFT          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    LT              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    GT              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    LE              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    GE              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    EQ              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    NE              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    AND             reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    XOR             reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    OR              reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    LAND            reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    LOR             reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    COMMA           reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    SEMI            reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    RBRACE          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    RPAREN          reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)
    RBRACKET        reduce using rule 129 (postfix_expression -> postfix_expression INCREMENT .)


state 109

    (130) postfix_expression -> postfix_expression DECREMENT .

    LBRACKET        reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    LPAREN          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    INCREMENT       reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    DECREMENT       reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    EQUALS          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    TIMES           reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDE          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    MOD             reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    PLUS            reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    MINUS           reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    LSHIFT          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    RSHIFT          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    LT              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    GT              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    LE              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    GE              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    EQ              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    NE              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    AND             reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    XOR             reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    OR              reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    LAND            reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    LOR             reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    COMMA           reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    SEMI            reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    RBRACE          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    RPAREN          reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)
    RBRACKET        reduce using rule 130 (postfix_expression -> postfix_expression DECREMENT .)


state 110

    (117) unary_expression -> INCREMENT unary_expression .

    EQUALS          reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    TIMES           reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE          reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    MOD             reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    PLUS            reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    MINUS           reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    LSHIFT          reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    RSHIFT          reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    LT              reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    GT              reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    LE              reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    GE              reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    EQ              reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    NE              reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    AND             reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    XOR             reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    OR              reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    LAND            reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    LOR             reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    SEMI            reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    RBRACE          reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    RPAREN          reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)
    RBRACKET        reduce using rule 117 (unary_expression -> INCREMENT unary_expression .)


state 111

    (131) postfix_expression -> LPAREN . type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> LPAREN . type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (136) primary_expression -> LPAREN . expression RPAREN
    (55) type_name -> . specifier_qualifier_list
    (79) expression -> . assignment_expression
    (29) specifier_qualifier_list -> . type_specifier specifier_qualifier_listopt
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    type_name                      shift and go to state 169
    expression                     shift and go to state 118
    specifier_qualifier_list       shift and go to state 119
    assignment_expression          shift and go to state 100
    type_specifier                 shift and go to state 120
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 112

    (118) unary_expression -> DECREMENT unary_expression .

    EQUALS          reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    TIMES           reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE          reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    MOD             reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    PLUS            reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    MINUS           reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    LSHIFT          reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    RSHIFT          reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    LT              reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    GT              reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    LE              reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    GE              reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    EQ              reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    NE              reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    AND             reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    XOR             reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    OR              reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    LAND            reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    LOR             reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    SEMI            reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    RBRACE          reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    RPAREN          reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)
    RBRACKET        reduce using rule 118 (unary_expression -> DECREMENT unary_expression .)


state 113

    (119) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 119 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 119 (unary_expression -> unary_operator cast_expression .)


state 114

    (114) cast_expression -> unary_expression .

    EQUALS          reduce using rule 114 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 114 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 114 (cast_expression -> unary_expression .)
    MOD             reduce using rule 114 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 114 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 114 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 114 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 114 (cast_expression -> unary_expression .)
    LT              reduce using rule 114 (cast_expression -> unary_expression .)
    GT              reduce using rule 114 (cast_expression -> unary_expression .)
    LE              reduce using rule 114 (cast_expression -> unary_expression .)
    GE              reduce using rule 114 (cast_expression -> unary_expression .)
    EQ              reduce using rule 114 (cast_expression -> unary_expression .)
    NE              reduce using rule 114 (cast_expression -> unary_expression .)
    AND             reduce using rule 114 (cast_expression -> unary_expression .)
    XOR             reduce using rule 114 (cast_expression -> unary_expression .)
    OR              reduce using rule 114 (cast_expression -> unary_expression .)
    LAND            reduce using rule 114 (cast_expression -> unary_expression .)
    LOR             reduce using rule 114 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 114 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 114 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 114 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 114 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 114 (cast_expression -> unary_expression .)


state 115

    (115) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (131) postfix_expression -> LPAREN . type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> LPAREN . type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (136) primary_expression -> LPAREN . expression RPAREN
    (55) type_name -> . specifier_qualifier_list
    (79) expression -> . assignment_expression
    (29) specifier_qualifier_list -> . type_specifier specifier_qualifier_listopt
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    type_name                      shift and go to state 170
    cast_expression                shift and go to state 52
    expression                     shift and go to state 118
    specifier_qualifier_list       shift and go to state 119
    assignment_expression          shift and go to state 100
    type_specifier                 shift and go to state 120
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 116

    (89) logical_AND_expression -> logical_AND_expression LAND . inclusive_OR_expression
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    inclusive_OR_expression        shift and go to state 171
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 117

    (131) postfix_expression -> LPAREN type_name . RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> LPAREN type_name . RPAREN LBRACKET initializer_list COMMA RBRACKET
    (115) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 172


state 118

    (136) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 173


state 119

    (55) type_name -> specifier_qualifier_list .

    RPAREN          reduce using rule 55 (type_name -> specifier_qualifier_list .)


state 120

    (29) specifier_qualifier_list -> type_specifier . specifier_qualifier_listopt
    (27) specifier_qualifier_listopt -> . specifier_qualifier_list
    (28) specifier_qualifier_listopt -> . empty
    (29) specifier_qualifier_list -> . type_specifier specifier_qualifier_listopt
    (144) empty -> .
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT

    RPAREN          reduce using rule 144 (empty -> .)
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    type_specifier                 shift and go to state 120
    specifier_qualifier_listopt    shift and go to state 174
    specifier_qualifier_list       shift and go to state 175
    empty                          shift and go to state 176

state 121

    (91) inclusive_OR_expression -> inclusive_OR_expression OR . exclusive_OR_expression
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    exclusive_OR_expression        shift and go to state 177
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 122

    (93) exclusive_OR_expression -> exclusive_OR_expression XOR . AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    AND_expression                 shift and go to state 178
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 123

    (95) AND_expression -> AND_expression AND . equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    equality_expression            shift and go to state 179
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 124

    (97) equality_expression -> equality_expression EQ . relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    relational_expression          shift and go to state 180
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 125

    (98) equality_expression -> equality_expression NE . relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    relational_expression          shift and go to state 181
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 126

    (100) relational_expression -> relational_expression LT . shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    shift_expression               shift and go to state 182
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 127

    (101) relational_expression -> relational_expression GT . shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 128

    (102) relational_expression -> relational_expression LE . shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 129

    (103) relational_expression -> relational_expression GE . shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    shift_expression               shift and go to state 185
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 130

    (105) shift_expression -> shift_expression LSHIFT . additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    additive_expression            shift and go to state 186
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 131

    (106) shift_expression -> shift_expression RSHIFT . additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    additive_expression            shift and go to state 187
    multiplicative_expression      shift and go to state 75
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 132

    (108) additive_expression -> additive_expression PLUS . multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    multiplicative_expression      shift and go to state 188
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 133

    (109) additive_expression -> additive_expression MINUS . multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    multiplicative_expression      shift and go to state 189
    cast_expression                shift and go to state 52
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 134

    (111) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    cast_expression                shift and go to state 190
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 135

    (112) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    cast_expression                shift and go to state 191
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 136

    (113) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    cast_expression                shift and go to state 192
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 137

    (33) direct_declarator -> direct_declarator LBRACKET assignment_expressionopt . RBRACKET

    RBRACKET        shift and go to state 193


state 138

    (34) direct_declarator -> direct_declarator LBRACKET STATIC . assignment_expression RBRACKET
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    assignment_expression          shift and go to state 194
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 139

    (80) assignment_expressionopt -> assignment_expression .

    RBRACKET        reduce using rule 80 (assignment_expressionopt -> assignment_expression .)


state 140

    (35) direct_declarator -> direct_declarator LBRACKET TIMES . RBRACKET
    (121) unary_operator -> TIMES .

    RBRACKET        shift and go to state 195
    LPAREN          reduce using rule 121 (unary_operator -> TIMES .)
    INCREMENT       reduce using rule 121 (unary_operator -> TIMES .)
    DECREMENT       reduce using rule 121 (unary_operator -> TIMES .)
    AND             reduce using rule 121 (unary_operator -> TIMES .)
    TIMES           reduce using rule 121 (unary_operator -> TIMES .)
    PLUS            reduce using rule 121 (unary_operator -> TIMES .)
    MINUS           reduce using rule 121 (unary_operator -> TIMES .)
    NOT             reduce using rule 121 (unary_operator -> TIMES .)
    LNOT            reduce using rule 121 (unary_operator -> TIMES .)
    ID              reduce using rule 121 (unary_operator -> TIMES .)
    STRING          reduce using rule 121 (unary_operator -> TIMES .)
    INUM            reduce using rule 121 (unary_operator -> TIMES .)
    FNUM            reduce using rule 121 (unary_operator -> TIMES .)
    CHARACTER       reduce using rule 121 (unary_operator -> TIMES .)


state 141

    (81) assignment_expressionopt -> empty .

    RBRACKET        reduce using rule 81 (assignment_expressionopt -> empty .)


state 142

    (36) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 196


state 143

    (37) direct_declarator -> direct_declarator LPAREN identifier_listopt . RPAREN

    RPAREN          shift and go to state 197


state 144

    (56) parameter_type_list -> parameter_list .
    (43) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 56 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 198


state 145

    (46) identifier_listopt -> identifier_list .
    (49) identifier_list -> identifier_list . COMMA ID

    RPAREN          reduce using rule 46 (identifier_listopt -> identifier_list .)
    COMMA           shift and go to state 199


state 146

    (47) identifier_listopt -> empty .

    RPAREN          reduce using rule 47 (identifier_listopt -> empty .)


state 147

    (42) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 42 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 42 (parameter_list -> parameter_declaration .)


state 148

    (48) identifier_list -> ID .

    COMMA           reduce using rule 48 (identifier_list -> ID .)
    RPAREN          reduce using rule 48 (identifier_list -> ID .)


state 149

    (44) parameter_declaration -> declaration_specifiers . declarator
    (45) parameter_declaration -> declaration_specifiers .
    (30) declarator -> . pointeropt direct_declarator
    (38) pointeropt -> . pointer
    (39) pointeropt -> . empty
    (40) pointer -> . TIMES
    (41) pointer -> . TIMES pointer
    (144) empty -> .

    COMMA           reduce using rule 45 (parameter_declaration -> declaration_specifiers .)
    RPAREN          reduce using rule 45 (parameter_declaration -> declaration_specifiers .)
    TIMES           shift and go to state 22
    ID              reduce using rule 144 (empty -> .)
    LPAREN          reduce using rule 144 (empty -> .)

    declarator                     shift and go to state 200
    pointeropt                     shift and go to state 17
    pointer                        shift and go to state 20
    empty                          shift and go to state 80

state 150

    (32) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 32 (direct_declarator -> LPAREN declarator RPAREN .)


state 151

    (69) compound_statement -> LBRACE block_item_listopt RBRACE .

    EXTERN          reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    STATIC          reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    VOID            reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    CHAR            reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    INT             reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    FLOAT           reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    $end            reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    IF              reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    FOR             reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    RETURN          reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    BREAK           reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    CONTINUE        reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    LBRACE          reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    INCREMENT       reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    DECREMENT       reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    LPAREN          reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    AND             reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    TIMES           reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    PLUS            reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    MINUS           reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    NOT             reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    LNOT            reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    ID              reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    STRING          reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    INUM            reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    FNUM            reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    CHARACTER       reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    SEMI            reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    RBRACE          reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)
    ELSE            reduce using rule 69 (compound_statement -> LBRACE block_item_listopt RBRACE .)


state 152

    (73) block_item_list -> block_item_list block_item .

    IF              reduce using rule 73 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 73 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 73 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 73 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 73 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 73 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 73 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 73 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 73 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 73 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 73 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 73 (block_item_list -> block_item_list block_item .)
    INCREMENT       reduce using rule 73 (block_item_list -> block_item_list block_item .)
    DECREMENT       reduce using rule 73 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 73 (block_item_list -> block_item_list block_item .)
    AND             reduce using rule 73 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 73 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 73 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 73 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 73 (block_item_list -> block_item_list block_item .)
    LNOT            reduce using rule 73 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 73 (block_item_list -> block_item_list block_item .)
    STRING          reduce using rule 73 (block_item_list -> block_item_list block_item .)
    INUM            reduce using rule 73 (block_item_list -> block_item_list block_item .)
    FNUM            reduce using rule 73 (block_item_list -> block_item_list block_item .)
    CHARACTER       reduce using rule 73 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 73 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 73 (block_item_list -> block_item_list block_item .)


state 153

    (78) expressionopt -> empty .

    SEMI            reduce using rule 78 (expressionopt -> empty .)
    RPAREN          reduce using rule 78 (expressionopt -> empty .)


state 154

    (62) selection_statement -> IF LPAREN . expression RPAREN statement
    (63) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (79) expression -> . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    expression                     shift and go to state 201
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 155

    (64) iteration_statement -> FOR LPAREN . expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement
    (65) iteration_statement -> FOR LPAREN . declaration expressionopt SEMI expressionopt RPAREN statement
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (6) declaration -> . declaration_specifiers init_declarator_listopt SEMI
    (79) expression -> . assignment_expression
    (144) empty -> .
    (13) declaration_specifiers -> . storage_class_specifier declaration_specifiersopt
    (14) declaration_specifiers -> . type_specifier declaration_specifiersopt
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (15) storage_class_specifier -> . EXTERN
    (16) storage_class_specifier -> . STATIC
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 144 (empty -> .)
    EXTERN          shift and go to state 8
    STATIC          shift and go to state 9
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    expressionopt                  shift and go to state 202
    declaration                    shift and go to state 203
    expression                     shift and go to state 94
    empty                          shift and go to state 153
    declaration_specifiers         shift and go to state 27
    assignment_expression          shift and go to state 100
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 156

    (76) expression_statement -> expressionopt SEMI .

    IF              reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    FOR             reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    RETURN          reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    BREAK           reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    CONTINUE        reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    LBRACE          reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    EXTERN          reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    STATIC          reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    VOID            reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    CHAR            reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    INT             reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    FLOAT           reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    INCREMENT       reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    DECREMENT       reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    LPAREN          reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    AND             reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    TIMES           reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    PLUS            reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    MINUS           reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    NOT             reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    LNOT            reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    ID              reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    STRING          reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    INUM            reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    FNUM            reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    CHARACTER       reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    SEMI            reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    RBRACE          reduce using rule 76 (expression_statement -> expressionopt SEMI .)
    ELSE            reduce using rule 76 (expression_statement -> expressionopt SEMI .)


state 157

    (66) jump_statement -> RETURN expressionopt . SEMI

    SEMI            shift and go to state 204


state 158

    (67) jump_statement -> BREAK SEMI .

    IF              reduce using rule 67 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 67 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 67 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 67 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 67 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 67 (jump_statement -> BREAK SEMI .)
    EXTERN          reduce using rule 67 (jump_statement -> BREAK SEMI .)
    STATIC          reduce using rule 67 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 67 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 67 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 67 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 67 (jump_statement -> BREAK SEMI .)
    INCREMENT       reduce using rule 67 (jump_statement -> BREAK SEMI .)
    DECREMENT       reduce using rule 67 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 67 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 67 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 67 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 67 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 67 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 67 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 67 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 67 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 67 (jump_statement -> BREAK SEMI .)
    INUM            reduce using rule 67 (jump_statement -> BREAK SEMI .)
    FNUM            reduce using rule 67 (jump_statement -> BREAK SEMI .)
    CHARACTER       reduce using rule 67 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 67 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 67 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 67 (jump_statement -> BREAK SEMI .)


state 159

    (68) jump_statement -> CONTINUE SEMI .

    IF              reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    EXTERN          reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    STATIC          reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    VOID            reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    INT             reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    INCREMENT       reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    DECREMENT       reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    AND             reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    ID              reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    STRING          reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    INUM            reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    FNUM            reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    CHARACTER       reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 68 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 68 (jump_statement -> CONTINUE SEMI .)


state 160

    (51) initializer -> LBRACE initializer_list RBRACE .

    COMMA           reduce using rule 51 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 51 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 51 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACKET        reduce using rule 51 (initializer -> LBRACE initializer_list RBRACE .)


state 161

    (52) initializer -> LBRACE initializer_list COMMA . RBRACE
    (54) initializer_list -> initializer_list COMMA . initializer
    (50) initializer -> . assignment_expression
    (51) initializer -> . LBRACE initializer_list RBRACE
    (52) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 205
    LBRACE          shift and go to state 44
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    initializer                    shift and go to state 206
    assignment_expression          shift and go to state 43
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 162

    (83) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 163

    (87) logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .
    (89) logical_AND_expression -> logical_AND_expression . LAND inclusive_OR_expression

    LOR             reduce using rule 87 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    COMMA           reduce using rule 87 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    SEMI            reduce using rule 87 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    RBRACE          reduce using rule 87 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    RPAREN          reduce using rule 87 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    RBRACKET        reduce using rule 87 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    LAND            shift and go to state 116


state 164

    (127) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 207


state 165

    (128) postfix_expression -> postfix_expression LPAREN argument_expression_listopt . RPAREN

    RPAREN          shift and go to state 208


state 166

    (137) argument_expression_listopt -> argument_expression_list .
    (140) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          reduce using rule 137 (argument_expression_listopt -> argument_expression_list .)
    COMMA           shift and go to state 209


state 167

    (138) argument_expression_listopt -> empty .

    RPAREN          reduce using rule 138 (argument_expression_listopt -> empty .)


state 168

    (139) argument_expression_list -> assignment_expression .

    COMMA           reduce using rule 139 (argument_expression_list -> assignment_expression .)
    RPAREN          reduce using rule 139 (argument_expression_list -> assignment_expression .)


state 169

    (131) postfix_expression -> LPAREN type_name . RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> LPAREN type_name . RPAREN LBRACKET initializer_list COMMA RBRACKET

    RPAREN          shift and go to state 210


state 170

    (115) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (131) postfix_expression -> LPAREN type_name . RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> LPAREN type_name . RPAREN LBRACKET initializer_list COMMA RBRACKET

    RPAREN          shift and go to state 211


state 171

    (89) logical_AND_expression -> logical_AND_expression LAND inclusive_OR_expression .
    (91) inclusive_OR_expression -> inclusive_OR_expression . OR exclusive_OR_expression

    LAND            reduce using rule 89 (logical_AND_expression -> logical_AND_expression LAND inclusive_OR_expression .)
    LOR             reduce using rule 89 (logical_AND_expression -> logical_AND_expression LAND inclusive_OR_expression .)
    COMMA           reduce using rule 89 (logical_AND_expression -> logical_AND_expression LAND inclusive_OR_expression .)
    SEMI            reduce using rule 89 (logical_AND_expression -> logical_AND_expression LAND inclusive_OR_expression .)
    RBRACE          reduce using rule 89 (logical_AND_expression -> logical_AND_expression LAND inclusive_OR_expression .)
    RPAREN          reduce using rule 89 (logical_AND_expression -> logical_AND_expression LAND inclusive_OR_expression .)
    RBRACKET        reduce using rule 89 (logical_AND_expression -> logical_AND_expression LAND inclusive_OR_expression .)
    OR              shift and go to state 121


state 172

    (131) postfix_expression -> LPAREN type_name RPAREN . LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> LPAREN type_name RPAREN . LBRACKET initializer_list COMMA RBRACKET
    (115) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LBRACKET        shift and go to state 212
    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    cast_expression                shift and go to state 213
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 173

    (136) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 136 (primary_expression -> LPAREN expression RPAREN .)


state 174

    (29) specifier_qualifier_list -> type_specifier specifier_qualifier_listopt .

    RPAREN          reduce using rule 29 (specifier_qualifier_list -> type_specifier specifier_qualifier_listopt .)


state 175

    (27) specifier_qualifier_listopt -> specifier_qualifier_list .

    RPAREN          reduce using rule 27 (specifier_qualifier_listopt -> specifier_qualifier_list .)


state 176

    (28) specifier_qualifier_listopt -> empty .

    RPAREN          reduce using rule 28 (specifier_qualifier_listopt -> empty .)


state 177

    (91) inclusive_OR_expression -> inclusive_OR_expression OR exclusive_OR_expression .
    (93) exclusive_OR_expression -> exclusive_OR_expression . XOR AND_expression

    OR              reduce using rule 91 (inclusive_OR_expression -> inclusive_OR_expression OR exclusive_OR_expression .)
    LAND            reduce using rule 91 (inclusive_OR_expression -> inclusive_OR_expression OR exclusive_OR_expression .)
    LOR             reduce using rule 91 (inclusive_OR_expression -> inclusive_OR_expression OR exclusive_OR_expression .)
    COMMA           reduce using rule 91 (inclusive_OR_expression -> inclusive_OR_expression OR exclusive_OR_expression .)
    SEMI            reduce using rule 91 (inclusive_OR_expression -> inclusive_OR_expression OR exclusive_OR_expression .)
    RBRACE          reduce using rule 91 (inclusive_OR_expression -> inclusive_OR_expression OR exclusive_OR_expression .)
    RPAREN          reduce using rule 91 (inclusive_OR_expression -> inclusive_OR_expression OR exclusive_OR_expression .)
    RBRACKET        reduce using rule 91 (inclusive_OR_expression -> inclusive_OR_expression OR exclusive_OR_expression .)
    XOR             shift and go to state 122


state 178

    (93) exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression .
    (95) AND_expression -> AND_expression . AND equality_expression

    XOR             reduce using rule 93 (exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression .)
    OR              reduce using rule 93 (exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression .)
    LAND            reduce using rule 93 (exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression .)
    LOR             reduce using rule 93 (exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression .)
    COMMA           reduce using rule 93 (exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression .)
    SEMI            reduce using rule 93 (exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression .)
    RBRACE          reduce using rule 93 (exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression .)
    RPAREN          reduce using rule 93 (exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression .)
    RBRACKET        reduce using rule 93 (exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression .)
    AND             shift and go to state 123


state 179

    (95) AND_expression -> AND_expression AND equality_expression .
    (97) equality_expression -> equality_expression . EQ relational_expression
    (98) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 95 (AND_expression -> AND_expression AND equality_expression .)
    XOR             reduce using rule 95 (AND_expression -> AND_expression AND equality_expression .)
    OR              reduce using rule 95 (AND_expression -> AND_expression AND equality_expression .)
    LAND            reduce using rule 95 (AND_expression -> AND_expression AND equality_expression .)
    LOR             reduce using rule 95 (AND_expression -> AND_expression AND equality_expression .)
    COMMA           reduce using rule 95 (AND_expression -> AND_expression AND equality_expression .)
    SEMI            reduce using rule 95 (AND_expression -> AND_expression AND equality_expression .)
    RBRACE          reduce using rule 95 (AND_expression -> AND_expression AND equality_expression .)
    RPAREN          reduce using rule 95 (AND_expression -> AND_expression AND equality_expression .)
    RBRACKET        reduce using rule 95 (AND_expression -> AND_expression AND equality_expression .)
    EQ              shift and go to state 124
    NE              shift and go to state 125


state 180

    (97) equality_expression -> equality_expression EQ relational_expression .
    (100) relational_expression -> relational_expression . LT shift_expression
    (101) relational_expression -> relational_expression . GT shift_expression
    (102) relational_expression -> relational_expression . LE shift_expression
    (103) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    XOR             reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 97 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 126
    GT              shift and go to state 127
    LE              shift and go to state 128
    GE              shift and go to state 129


state 181

    (98) equality_expression -> equality_expression NE relational_expression .
    (100) relational_expression -> relational_expression . LT shift_expression
    (101) relational_expression -> relational_expression . GT shift_expression
    (102) relational_expression -> relational_expression . LE shift_expression
    (103) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    XOR             reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    LAND            reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    LOR             reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    SEMI            reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    RBRACE          reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    RBRACKET        reduce using rule 98 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 126
    GT              shift and go to state 127
    LE              shift and go to state 128
    GE              shift and go to state 129


state 182

    (100) relational_expression -> relational_expression LT shift_expression .
    (105) shift_expression -> shift_expression . LSHIFT additive_expression
    (106) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    GE              reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    NE              reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    XOR             reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    LAND            reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    LOR             reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    SEMI            reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 100 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 130
    RSHIFT          shift and go to state 131


state 183

    (101) relational_expression -> relational_expression GT shift_expression .
    (105) shift_expression -> shift_expression . LSHIFT additive_expression
    (106) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    GE              reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    NE              reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    XOR             reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    LAND            reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    LOR             reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    SEMI            reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 101 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 130
    RSHIFT          shift and go to state 131


state 184

    (102) relational_expression -> relational_expression LE shift_expression .
    (105) shift_expression -> shift_expression . LSHIFT additive_expression
    (106) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    EQ              reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    NE              reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    XOR             reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    LAND            reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    LOR             reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    COMMA           reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    SEMI            reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    RBRACE          reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    RPAREN          reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    RBRACKET        reduce using rule 102 (relational_expression -> relational_expression LE shift_expression .)
    LSHIFT          shift and go to state 130
    RSHIFT          shift and go to state 131


state 185

    (103) relational_expression -> relational_expression GE shift_expression .
    (105) shift_expression -> shift_expression . LSHIFT additive_expression
    (106) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    EQ              reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    NE              reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    XOR             reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    LAND            reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    LOR             reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    COMMA           reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    SEMI            reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    RBRACE          reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    RPAREN          reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    RBRACKET        reduce using rule 103 (relational_expression -> relational_expression GE shift_expression .)
    LSHIFT          shift and go to state 130
    RSHIFT          shift and go to state 131


state 186

    (105) shift_expression -> shift_expression LSHIFT additive_expression .
    (108) additive_expression -> additive_expression . PLUS multiplicative_expression
    (109) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LE              reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GE              reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ              reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NE              reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LAND            reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LOR             reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMI            reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACE          reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACKET        reduce using rule 105 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 132
    MINUS           shift and go to state 133


state 187

    (106) shift_expression -> shift_expression RSHIFT additive_expression .
    (108) additive_expression -> additive_expression . PLUS multiplicative_expression
    (109) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LE              reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GE              reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ              reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NE              reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LAND            reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LOR             reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMI            reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACE          reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACKET        reduce using rule 106 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 132
    MINUS           shift and go to state 133


state 188

    (108) additive_expression -> additive_expression PLUS multiplicative_expression .
    (111) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (112) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (113) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 108 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 134
    DIVIDE          shift and go to state 135
    MOD             shift and go to state 136


state 189

    (109) additive_expression -> additive_expression MINUS multiplicative_expression .
    (111) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (112) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (113) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 109 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 134
    DIVIDE          shift and go to state 135
    MOD             shift and go to state 136


state 190

    (111) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LSHIFT          reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RSHIFT          reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE              reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE              reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ              reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE              reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND             reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    XOR             reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR              reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LAND            reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LOR             reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMI            reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 111 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 191

    (112) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LSHIFT          reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSHIFT          reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE              reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE              reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ              reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE              reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMI            reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 112 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 192

    (113) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LSHIFT          reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSHIFT          reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT              reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT              reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE              reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE              reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ              reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NE              reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    XOR             reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMI            reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACKET        reduce using rule 113 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 193

    (33) direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .

    LBRACKET        reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    LPAREN          reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    EQUALS          reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    EXTERN          reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    STATIC          reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    VOID            reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    CHAR            reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    INT             reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    FLOAT           reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    LBRACE          reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    COMMA           reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    SEMI            reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)
    RPAREN          reduce using rule 33 (direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET .)


state 194

    (34) direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 214


state 195

    (35) direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EQUALS          reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EXTERN          reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STATIC          reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    VOID            reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    CHAR            reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    INT             reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    FLOAT           reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LBRACE          reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SEMI            reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 35 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)


state 196

    (36) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 36 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 197

    (37) direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .

    LBRACKET        reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    LPAREN          reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    EQUALS          reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    EXTERN          reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    STATIC          reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    VOID            reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    CHAR            reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    INT             reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    FLOAT           reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    LBRACE          reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    COMMA           reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    SEMI            reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)
    RPAREN          reduce using rule 37 (direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN .)


state 198

    (43) parameter_list -> parameter_list COMMA . parameter_declaration
    (44) parameter_declaration -> . declaration_specifiers declarator
    (45) parameter_declaration -> . declaration_specifiers
    (13) declaration_specifiers -> . storage_class_specifier declaration_specifiersopt
    (14) declaration_specifiers -> . type_specifier declaration_specifiersopt
    (15) storage_class_specifier -> . EXTERN
    (16) storage_class_specifier -> . STATIC
    (17) type_specifier -> . VOID
    (18) type_specifier -> . CHAR
    (19) type_specifier -> . INT
    (20) type_specifier -> . FLOAT

    EXTERN          shift and go to state 8
    STATIC          shift and go to state 9
    VOID            shift and go to state 10
    CHAR            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    parameter_declaration          shift and go to state 215
    declaration_specifiers         shift and go to state 149
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7

state 199

    (49) identifier_list -> identifier_list COMMA . ID

    ID              shift and go to state 216


state 200

    (44) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 44 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 44 (parameter_declaration -> declaration_specifiers declarator .)


state 201

    (62) selection_statement -> IF LPAREN expression . RPAREN statement
    (63) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 217


state 202

    (64) iteration_statement -> FOR LPAREN expressionopt . SEMI expressionopt SEMI expressionopt RPAREN statement

    SEMI            shift and go to state 218


state 203

    (65) iteration_statement -> FOR LPAREN declaration . expressionopt SEMI expressionopt RPAREN statement
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (79) expression -> . assignment_expression
    (144) empty -> .
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    expressionopt                  shift and go to state 219
    expression                     shift and go to state 94
    empty                          shift and go to state 153
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 204

    (66) jump_statement -> RETURN expressionopt SEMI .

    IF              reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    FOR             reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    RETURN          reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    BREAK           reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    CONTINUE        reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    LBRACE          reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    EXTERN          reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    STATIC          reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    VOID            reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    CHAR            reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    INT             reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    FLOAT           reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    INCREMENT       reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    DECREMENT       reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    LPAREN          reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    AND             reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    TIMES           reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    PLUS            reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    MINUS           reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    NOT             reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    LNOT            reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    ID              reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    STRING          reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    INUM            reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    FNUM            reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    CHARACTER       reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    SEMI            reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    RBRACE          reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)
    ELSE            reduce using rule 66 (jump_statement -> RETURN expressionopt SEMI .)


state 205

    (52) initializer -> LBRACE initializer_list COMMA RBRACE .

    COMMA           reduce using rule 52 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 52 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 52 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACKET        reduce using rule 52 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 206

    (54) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 54 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 54 (initializer_list -> initializer_list COMMA initializer .)
    RBRACKET        reduce using rule 54 (initializer_list -> initializer_list COMMA initializer .)


state 207

    (127) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 127 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 208

    (128) postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .

    LBRACKET        reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    LPAREN          reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    INCREMENT       reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    DECREMENT       reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    EQUALS          reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    TIMES           reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    DIVIDE          reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    MOD             reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    PLUS            reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    MINUS           reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    LSHIFT          reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    RSHIFT          reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    LT              reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    GT              reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    LE              reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    GE              reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    EQ              reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    NE              reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    AND             reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    XOR             reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    OR              reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    LAND            reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    LOR             reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    COMMA           reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    SEMI            reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    RBRACE          reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    RPAREN          reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)
    RBRACKET        reduce using rule 128 (postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN .)


state 209

    (140) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    assignment_expression          shift and go to state 220
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 210

    (131) postfix_expression -> LPAREN type_name RPAREN . LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> LPAREN type_name RPAREN . LBRACKET initializer_list COMMA RBRACKET

    LBRACKET        shift and go to state 212


state 211

    (115) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (131) postfix_expression -> LPAREN type_name RPAREN . LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> LPAREN type_name RPAREN . LBRACKET initializer_list COMMA RBRACKET
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER

    LBRACKET        shift and go to state 212
    LPAREN          shift and go to state 115
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    cast_expression                shift and go to state 213
    unary_expression               shift and go to state 114
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    primary_expression             shift and go to state 54
    constant                       shift and go to state 64

state 212

    (131) postfix_expression -> LPAREN type_name RPAREN LBRACKET . initializer_list RBRACKET
    (132) postfix_expression -> LPAREN type_name RPAREN LBRACKET . initializer_list COMMA RBRACKET
    (53) initializer_list -> . initializer
    (54) initializer_list -> . initializer_list COMMA initializer
    (50) initializer -> . assignment_expression
    (51) initializer -> . LBRACE initializer_list RBRACE
    (52) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 44
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    initializer_list               shift and go to state 221
    initializer                    shift and go to state 102
    assignment_expression          shift and go to state 43
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 213

    (115) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE              reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 115 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 214

    (34) direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    SEMI            reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 34 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)


state 215

    (43) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 43 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 43 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 216

    (49) identifier_list -> identifier_list COMMA ID .

    COMMA           reduce using rule 49 (identifier_list -> identifier_list COMMA ID .)
    RPAREN          reduce using rule 49 (identifier_list -> identifier_list COMMA ID .)


state 217

    (62) selection_statement -> IF LPAREN expression RPAREN . statement
    (63) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) selection_statement -> . IF LPAREN expression RPAREN statement
    (63) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (64) iteration_statement -> . FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement
    (65) iteration_statement -> . FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement
    (66) jump_statement -> . RETURN expressionopt SEMI
    (67) jump_statement -> . BREAK SEMI
    (68) jump_statement -> . CONTINUE SEMI
    (69) compound_statement -> . LBRACE block_item_listopt RBRACE
    (76) expression_statement -> . expressionopt SEMI
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (79) expression -> . assignment_expression
    (144) empty -> .
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IF              shift and go to state 93
    FOR             shift and go to state 95
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 41
    SEMI            reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    expression                     shift and go to state 94
    statement                      shift and go to state 222
    selection_statement            shift and go to state 88
    iteration_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    compound_statement             shift and go to state 91
    expression_statement           shift and go to state 92
    expressionopt                  shift and go to state 96
    empty                          shift and go to state 153
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 218

    (64) iteration_statement -> FOR LPAREN expressionopt SEMI . expressionopt SEMI expressionopt RPAREN statement
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (79) expression -> . assignment_expression
    (144) empty -> .
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    expressionopt                  shift and go to state 223
    expression                     shift and go to state 94
    empty                          shift and go to state 153
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 219

    (65) iteration_statement -> FOR LPAREN declaration expressionopt . SEMI expressionopt RPAREN statement

    SEMI            shift and go to state 224


state 220

    (140) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    COMMA           reduce using rule 140 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    RPAREN          reduce using rule 140 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 221

    (131) postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list . RBRACKET
    (132) postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list . COMMA RBRACKET
    (54) initializer_list -> initializer_list . COMMA initializer

    RBRACKET        shift and go to state 225
    COMMA           shift and go to state 226


state 222

    (62) selection_statement -> IF LPAREN expression RPAREN statement .
    (63) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INUM            reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FNUM            reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 227

  ! ELSE            [ reduce using rule 62 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 223

    (64) iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt . SEMI expressionopt RPAREN statement

    SEMI            shift and go to state 228


state 224

    (65) iteration_statement -> FOR LPAREN declaration expressionopt SEMI . expressionopt RPAREN statement
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (79) expression -> . assignment_expression
    (144) empty -> .
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    expressionopt                  shift and go to state 229
    expression                     shift and go to state 94
    empty                          shift and go to state 153
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 225

    (131) postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .

    LBRACKET        reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    LPAREN          reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    INCREMENT       reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    DECREMENT       reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    EQUALS          reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    TIMES           reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    DIVIDE          reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    MOD             reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    PLUS            reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    MINUS           reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    LSHIFT          reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    RSHIFT          reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    LT              reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    GT              reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    LE              reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    GE              reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    EQ              reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    NE              reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    AND             reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    XOR             reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    OR              reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    LAND            reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    LOR             reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    COMMA           reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    SEMI            reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    RBRACE          reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    RPAREN          reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)
    RBRACKET        reduce using rule 131 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET .)


state 226

    (132) postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA . RBRACKET
    (54) initializer_list -> initializer_list COMMA . initializer
    (50) initializer -> . assignment_expression
    (51) initializer -> . LBRACE initializer_list RBRACE
    (52) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACKET        shift and go to state 230
    LBRACE          shift and go to state 44
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    initializer                    shift and go to state 206
    assignment_expression          shift and go to state 43
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 227

    (63) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) selection_statement -> . IF LPAREN expression RPAREN statement
    (63) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (64) iteration_statement -> . FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement
    (65) iteration_statement -> . FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement
    (66) jump_statement -> . RETURN expressionopt SEMI
    (67) jump_statement -> . BREAK SEMI
    (68) jump_statement -> . CONTINUE SEMI
    (69) compound_statement -> . LBRACE block_item_listopt RBRACE
    (76) expression_statement -> . expressionopt SEMI
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (79) expression -> . assignment_expression
    (144) empty -> .
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IF              shift and go to state 93
    FOR             shift and go to state 95
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 41
    SEMI            reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    expression                     shift and go to state 94
    statement                      shift and go to state 231
    selection_statement            shift and go to state 88
    iteration_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    compound_statement             shift and go to state 91
    expression_statement           shift and go to state 92
    expressionopt                  shift and go to state 96
    empty                          shift and go to state 153
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 228

    (64) iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI . expressionopt RPAREN statement
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (79) expression -> . assignment_expression
    (144) empty -> .
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    expressionopt                  shift and go to state 232
    expression                     shift and go to state 94
    empty                          shift and go to state 153
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 229

    (65) iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt . RPAREN statement

    RPAREN          shift and go to state 233


state 230

    (132) postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .

    LBRACKET        reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    LPAREN          reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    INCREMENT       reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    DECREMENT       reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    EQUALS          reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    TIMES           reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    DIVIDE          reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    MOD             reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    PLUS            reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    MINUS           reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    LSHIFT          reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    RSHIFT          reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    LT              reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    GT              reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    LE              reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    GE              reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    EQ              reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    NE              reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    AND             reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    XOR             reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    OR              reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    LAND            reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    LOR             reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    COMMA           reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    SEMI            reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    RBRACE          reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    RPAREN          reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)
    RBRACKET        reduce using rule 132 (postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET .)


state 231

    (63) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    IF              reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INCREMENT       reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DECREMENT       reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INUM            reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FNUM            reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHARACTER       reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 63 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 232

    (64) iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt . RPAREN statement

    RPAREN          shift and go to state 234


state 233

    (65) iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN . statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) selection_statement -> . IF LPAREN expression RPAREN statement
    (63) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (64) iteration_statement -> . FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement
    (65) iteration_statement -> . FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement
    (66) jump_statement -> . RETURN expressionopt SEMI
    (67) jump_statement -> . BREAK SEMI
    (68) jump_statement -> . CONTINUE SEMI
    (69) compound_statement -> . LBRACE block_item_listopt RBRACE
    (76) expression_statement -> . expressionopt SEMI
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (79) expression -> . assignment_expression
    (144) empty -> .
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IF              shift and go to state 93
    FOR             shift and go to state 95
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 41
    SEMI            reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    expressionopt                  shift and go to state 96
    statement                      shift and go to state 235
    selection_statement            shift and go to state 88
    iteration_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    compound_statement             shift and go to state 91
    expression_statement           shift and go to state 92
    expression                     shift and go to state 94
    empty                          shift and go to state 153
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 234

    (64) iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN . statement
    (57) statement -> . selection_statement
    (58) statement -> . iteration_statement
    (59) statement -> . jump_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) selection_statement -> . IF LPAREN expression RPAREN statement
    (63) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (64) iteration_statement -> . FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement
    (65) iteration_statement -> . FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement
    (66) jump_statement -> . RETURN expressionopt SEMI
    (67) jump_statement -> . BREAK SEMI
    (68) jump_statement -> . CONTINUE SEMI
    (69) compound_statement -> . LBRACE block_item_listopt RBRACE
    (76) expression_statement -> . expressionopt SEMI
    (77) expressionopt -> . expression
    (78) expressionopt -> . empty
    (79) expression -> . assignment_expression
    (144) empty -> .
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (85) conditional_expression -> . logical_OR_expression
    (116) unary_expression -> . postfix_expression
    (117) unary_expression -> . INCREMENT unary_expression
    (118) unary_expression -> . DECREMENT unary_expression
    (119) unary_expression -> . unary_operator cast_expression
    (86) logical_OR_expression -> . logical_AND_expression
    (87) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (126) postfix_expression -> . primary_expression
    (127) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (128) postfix_expression -> . postfix_expression LPAREN argument_expression_listopt RPAREN
    (129) postfix_expression -> . postfix_expression INCREMENT
    (130) postfix_expression -> . postfix_expression DECREMENT
    (131) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET
    (132) postfix_expression -> . LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET
    (120) unary_operator -> . AND
    (121) unary_operator -> . TIMES
    (122) unary_operator -> . PLUS
    (123) unary_operator -> . MINUS
    (124) unary_operator -> . NOT
    (125) unary_operator -> . LNOT
    (88) logical_AND_expression -> . inclusive_OR_expression
    (89) logical_AND_expression -> . logical_AND_expression LAND inclusive_OR_expression
    (133) primary_expression -> . ID
    (134) primary_expression -> . constant
    (135) primary_expression -> . STRING
    (136) primary_expression -> . LPAREN expression RPAREN
    (90) inclusive_OR_expression -> . exclusive_OR_expression
    (91) inclusive_OR_expression -> . inclusive_OR_expression OR exclusive_OR_expression
    (141) constant -> . INUM
    (142) constant -> . FNUM
    (143) constant -> . CHARACTER
    (92) exclusive_OR_expression -> . AND_expression
    (93) exclusive_OR_expression -> . exclusive_OR_expression XOR AND_expression
    (94) AND_expression -> . equality_expression
    (95) AND_expression -> . AND_expression AND equality_expression
    (96) equality_expression -> . relational_expression
    (97) equality_expression -> . equality_expression EQ relational_expression
    (98) equality_expression -> . equality_expression NE relational_expression
    (99) relational_expression -> . shift_expression
    (100) relational_expression -> . relational_expression LT shift_expression
    (101) relational_expression -> . relational_expression GT shift_expression
    (102) relational_expression -> . relational_expression LE shift_expression
    (103) relational_expression -> . relational_expression GE shift_expression
    (104) shift_expression -> . additive_expression
    (105) shift_expression -> . shift_expression LSHIFT additive_expression
    (106) shift_expression -> . shift_expression RSHIFT additive_expression
    (107) additive_expression -> . multiplicative_expression
    (108) additive_expression -> . additive_expression PLUS multiplicative_expression
    (109) additive_expression -> . additive_expression MINUS multiplicative_expression
    (110) multiplicative_expression -> . cast_expression
    (111) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (112) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (113) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (114) cast_expression -> . unary_expression
    (115) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IF              shift and go to state 93
    FOR             shift and go to state 95
    RETURN          shift and go to state 97
    BREAK           shift and go to state 98
    CONTINUE        shift and go to state 99
    LBRACE          shift and go to state 41
    SEMI            reduce using rule 144 (empty -> .)
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50
    LPAREN          shift and go to state 55
    AND             shift and go to state 56
    TIMES           shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    NOT             shift and go to state 60
    LNOT            shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 65
    INUM            shift and go to state 67
    FNUM            shift and go to state 68
    CHARACTER       shift and go to state 69

    expressionopt                  shift and go to state 96
    statement                      shift and go to state 236
    selection_statement            shift and go to state 88
    iteration_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    compound_statement             shift and go to state 91
    expression_statement           shift and go to state 92
    expression                     shift and go to state 94
    empty                          shift and go to state 153
    assignment_expression          shift and go to state 100
    conditional_expression         shift and go to state 45
    unary_expression               shift and go to state 46
    logical_OR_expression          shift and go to state 47
    postfix_expression             shift and go to state 48
    unary_operator                 shift and go to state 51
    cast_expression                shift and go to state 52
    logical_AND_expression         shift and go to state 53
    primary_expression             shift and go to state 54
    inclusive_OR_expression        shift and go to state 62
    constant                       shift and go to state 64
    exclusive_OR_expression        shift and go to state 66
    AND_expression                 shift and go to state 70
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 235

    (65) iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .

    IF              reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    FOR             reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    RETURN          reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    BREAK           reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    CONTINUE        reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    LBRACE          reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    EXTERN          reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    STATIC          reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    VOID            reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    CHAR            reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    INT             reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    FLOAT           reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    INCREMENT       reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    DECREMENT       reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    LPAREN          reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    AND             reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    TIMES           reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    PLUS            reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    MINUS           reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    NOT             reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    LNOT            reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    ID              reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    STRING          reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    INUM            reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    FNUM            reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    CHARACTER       reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    SEMI            reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    RBRACE          reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)
    ELSE            reduce using rule 65 (iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement .)


state 236

    (64) iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .

    IF              reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    FOR             reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    RETURN          reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    BREAK           reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    CONTINUE        reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    LBRACE          reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    EXTERN          reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    STATIC          reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    VOID            reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    CHAR            reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    INT             reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    FLOAT           reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    INCREMENT       reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    DECREMENT       reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    LPAREN          reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    AND             reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    TIMES           reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    PLUS            reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    MINUS           reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    NOT             reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    LNOT            reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    ID              reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    STRING          reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    INUM            reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    FNUM            reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    CHARACTER       reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    SEMI            reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    RBRACE          reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)
    ELSE            reduce using rule 64 (iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 222 resolved as shift
