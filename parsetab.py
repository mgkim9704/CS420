
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR CHARACTER COMMA DECREMENT DIVIDE ELSE EQ EQUALS EXTERN FLOAT FNUM FOR GE GT ID IF INCREMENT INT INUM LAND LBRACE LBRACKET LE LNOT LOR LPAREN LSHIFT LT MINUS MOD NE NOT OR PLUS RBRACE RBRACKET RETURN RPAREN RSHIFT SEMI STATIC STRING TIMES VOID XORtranslation_unit : external_declarationtranslation_unit : translation_unit external_declarationexternal_declaration : function_definitionexternal_declaration : declarationfunction_definition : declaration_specifiers declarator declaration_listopt compound_statementdeclaration : declaration_specifiers init_declarator_listopt SEMIdeclaration_listopt : declaration_listdeclaration_listopt : emptydeclaration_list : declarationdeclaration_list : declaration_list declarationdeclaration_specifiersopt : declaration_specifiersdeclaration_specifiersopt : emptydeclaration_specifiers : storage_class_specifier declaration_specifiersoptdeclaration_specifiers : type_specifier declaration_specifiersoptstorage_class_specifier : EXTERN \n                               | STATIC\n                               type_specifier : VOID\n                      | CHAR\n                      | INT\n                      | FLOAT\n                      init_declarator_listopt : init_declarator_listinit_declarator_listopt : emptyinit_declarator_list : init_declaratorinit_declarator_list : init_declarator_list COMMA init_declaratorinit_declarator : declaratorinit_declarator : declarator EQUALS initializerspecifier_qualifier_listopt : specifier_qualifier_listspecifier_qualifier_listopt : emptyspecifier_qualifier_list : type_specifier specifier_qualifier_listoptdeclarator : pointeropt direct_declaratordirect_declarator : IDdirect_declarator : LPAREN declarator RPARENdirect_declarator : direct_declarator LBRACKET assignment_expressionopt RBRACKETdirect_declarator : direct_declarator LBRACKET STATIC assignment_expression RBRACKETdirect_declarator : direct_declarator LBRACKET TIMES RBRACKETdirect_declarator : direct_declarator LPAREN parameter_type_list RPARENdirect_declarator : direct_declarator LPAREN identifier_listopt RPARENpointeropt : pointerpointeropt : emptypointer : TIMESpointer : TIMES pointerparameter_list : parameter_declarationparameter_list : parameter_list COMMA parameter_declarationparameter_declaration : declaration_specifiers declaratorparameter_declaration : declaration_specifiersidentifier_listopt : identifier_listidentifier_listopt : emptyidentifier_list : IDidentifier_list : identifier_list COMMA IDinitializer : assignment_expressioninitializer : LBRACE initializer_list RBRACE\n                       | LBRACE initializer_list COMMA RBRACEinitializer_list : initializerinitializer_list : initializer_list COMMA initializertype_name : specifier_qualifier_listparameter_type_list : parameter_liststatement : selection_statementstatement : iteration_statementstatement : jump_statementstatement : compound_statementstatement : expression_statementselection_statement : IF LPAREN expression RPAREN statementselection_statement : IF LPAREN expression RPAREN statement ELSE statementiteration_statement : FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statementiteration_statement : FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statementjump_statement : RETURN expressionopt SEMIcompound_statement : LBRACE block_item_listopt RBRACEblock_item_listopt : block_item_listblock_item_listopt : emptyblock_item_list : block_itemblock_item_list : block_item_list block_itemblock_item : declarationblock_item : statementexpression_statement : expressionopt SEMIexpressionopt : expressionexpressionopt : emptyexpression : assignment_expressionexpression : expression COMMA assignment_expressionassignment_expressionopt : assignment_expressionassignment_expressionopt : emptyassignment_expression : conditional_expressionassignment_expression : unary_expression assignment_operator assignment_expressionassignment_operator : EQUALSconditional_expression : logical_OR_expressionlogical_OR_expression : logical_AND_expressionlogical_OR_expression : logical_OR_expression LOR logical_AND_expressionlogical_AND_expression : inclusive_OR_expressionlogical_AND_expression : logical_AND_expression LAND inclusive_OR_expressioninclusive_OR_expression : exclusive_OR_expressioninclusive_OR_expression : inclusive_OR_expression OR exclusive_OR_expressionexclusive_OR_expression : AND_expressionexclusive_OR_expression : exclusive_OR_expression XOR AND_expressionAND_expression : equality_expressionAND_expression : AND_expression AND equality_expressionequality_expression : relational_expressionequality_expression : equality_expression EQ relational_expressionequality_expression : equality_expression NE relational_expressionrelational_expression : shift_expressionrelational_expression : relational_expression LT shift_expressionrelational_expression : relational_expression GT shift_expressionrelational_expression : relational_expression LE shift_expressionrelational_expression : relational_expression GE shift_expressionshift_expression : additive_expressionshift_expression : shift_expression LSHIFT additive_expressionshift_expression : shift_expression RSHIFT additive_expressionadditive_expression : multiplicative_expressionadditive_expression : additive_expression PLUS multiplicative_expressionadditive_expression : additive_expression MINUS multiplicative_expressionmultiplicative_expression : cast_expressionmultiplicative_expression : multiplicative_expression TIMES cast_expressionmultiplicative_expression : multiplicative_expression DIVIDE cast_expressionmultiplicative_expression : multiplicative_expression MOD cast_expressioncast_expression : unary_expressioncast_expression : LPAREN type_name RPAREN cast_expressionunary_expression : postfix_expressionunary_expression : INCREMENT unary_expressionunary_expression : DECREMENT unary_expressionunary_expression : unary_operator cast_expressionunary_operator : AND\n                      | TIMES\n                      | PLUS\n                      | MINUS\n                      | NOT\n                      | LNOT\n                      postfix_expression : primary_expressionpostfix_expression : postfix_expression LBRACKET expression RBRACKETpostfix_expression : postfix_expression LPAREN argument_expression_listopt RPARENpostfix_expression : postfix_expression INCREMENTpostfix_expression : postfix_expression DECREMENTpostfix_expression : LPAREN type_name RPAREN LBRACKET initializer_list RBRACKETpostfix_expression : LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKETprimary_expression : ID\n                          | constant\n                          | STRING\n                          | LPAREN expression RPAREN\n                          argument_expression_listopt : argument_expression_listargument_expression_listopt : emptyargument_expression_list : assignment_expressionargument_expression_list : argument_expression_list COMMA assignment_expressionconstant : INUM\n                | FNUM\n                | CHARACTERempty : '
    
_lr_action_items = {'EXTERN':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,30,32,33,34,35,40,41,76,78,83,85,86,87,88,89,90,91,92,148,149,150,154,155,190,192,193,194,195,202,212,220,229,233,234,],[8,8,-1,-3,-4,8,8,-15,-16,-17,-18,-19,-20,-2,8,8,-9,-6,-30,-31,-5,8,-10,8,8,-70,-72,-73,-57,-58,-59,-60,-61,-32,-67,-71,8,-74,-33,-35,-36,-37,8,-66,-34,-62,-63,-65,-64,]),'STATIC':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,30,32,33,34,35,40,41,76,77,78,83,85,86,87,88,89,90,91,92,148,149,150,154,155,190,192,193,194,195,202,212,220,229,233,234,],[9,9,-1,-3,-4,9,9,-15,-16,-17,-18,-19,-20,-2,9,9,-9,-6,-30,-31,-5,9,-10,136,9,9,-70,-72,-73,-57,-58,-59,-60,-61,-32,-67,-71,9,-74,-33,-35,-36,-37,9,-66,-34,-62,-63,-65,-64,]),'VOID':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,30,32,33,34,35,40,41,55,76,78,83,85,86,87,88,89,90,91,92,109,113,118,148,149,150,154,155,190,192,193,194,195,202,212,220,229,233,234,],[10,10,-1,-3,-4,10,10,-15,-16,-17,-18,-19,-20,-2,10,10,-9,-6,-30,-31,-5,10,10,-10,10,10,-70,-72,-73,-57,-58,-59,-60,-61,10,10,10,-32,-67,-71,10,-74,-33,-35,-36,-37,10,-66,-34,-62,-63,-65,-64,]),'CHAR':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,30,32,33,34,35,40,41,55,76,78,83,85,86,87,88,89,90,91,92,109,113,118,148,149,150,154,155,190,192,193,194,195,202,212,220,229,233,234,],[11,11,-1,-3,-4,11,11,-15,-16,-17,-18,-19,-20,-2,11,11,-9,-6,-30,-31,-5,11,11,-10,11,11,-70,-72,-73,-57,-58,-59,-60,-61,11,11,11,-32,-67,-71,11,-74,-33,-35,-36,-37,11,-66,-34,-62,-63,-65,-64,]),'INT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,30,32,33,34,35,40,41,55,76,78,83,85,86,87,88,89,90,91,92,109,113,118,148,149,150,154,155,190,192,193,194,195,202,212,220,229,233,234,],[12,12,-1,-3,-4,12,12,-15,-16,-17,-18,-19,-20,-2,12,12,-9,-6,-30,-31,-5,12,12,-10,12,12,-70,-72,-73,-57,-58,-59,-60,-61,12,12,12,-32,-67,-71,12,-74,-33,-35,-36,-37,12,-66,-34,-62,-63,-65,-64,]),'FLOAT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,30,32,33,34,35,40,41,55,76,78,83,85,86,87,88,89,90,91,92,109,113,118,148,149,150,154,155,190,192,193,194,195,202,212,220,229,233,234,],[13,13,-1,-3,-4,13,13,-15,-16,-17,-18,-19,-20,-2,13,13,-9,-6,-30,-31,-5,13,13,-10,13,13,-70,-72,-73,-57,-58,-59,-60,-61,13,13,13,-32,-67,-71,13,-74,-33,-35,-36,-37,13,-66,-34,-62,-63,-65,-64,]),'$end':([1,2,3,4,14,33,40,149,],[0,-1,-3,-4,-2,-6,-5,-67,]),'SEMI':([5,6,7,8,9,10,11,12,13,15,16,18,19,21,23,24,25,26,27,33,34,35,39,41,42,43,45,46,47,48,52,53,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,83,84,85,86,87,88,89,90,91,92,94,96,97,98,106,107,108,110,111,112,148,149,150,151,154,155,156,157,159,160,168,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,199,200,201,202,203,205,206,211,212,215,216,217,220,221,223,225,228,229,231,232,233,234,],[-143,-143,-143,-15,-16,-17,-18,-19,-20,-25,33,-21,-22,-23,-13,-11,-12,-14,-143,-6,-30,-31,-25,-143,-26,-50,-81,-113,-84,-115,-109,-85,-125,-87,-132,-133,-134,-89,-140,-141,-142,-91,-93,-95,-98,-103,-106,-24,-143,-76,-70,-72,-73,-57,-58,-59,-60,-61,-75,155,-143,-77,-128,-129,-116,-117,-118,-113,-32,-67,-71,-76,-143,-74,202,-51,-82,-86,-88,-135,-90,-92,-94,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-33,-35,-36,-37,-78,216,-143,-66,-52,-126,-127,-114,-34,-143,-143,222,-62,226,-130,-143,-131,-63,-143,-143,-65,-64,]),'ID':([5,6,7,8,9,10,11,12,13,17,19,20,22,23,24,25,26,27,29,33,36,37,38,41,44,49,50,51,55,56,57,58,59,60,61,77,78,80,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,147,149,150,152,153,154,155,158,169,196,201,202,207,209,210,215,216,220,222,224,225,226,229,231,232,233,234,],[-143,-143,-143,-15,-16,-17,-18,-19,-20,35,-39,-38,-40,-13,-11,-12,-14,-143,63,-6,-143,-143,-41,63,63,63,63,63,63,-119,-120,-121,-122,-123,-124,63,146,-39,63,-70,-72,-73,-57,-58,-59,-60,-61,63,63,-83,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-120,-143,-67,-71,63,63,63,-74,63,63,214,63,-66,63,63,63,63,63,-62,63,63,63,63,-63,63,63,-65,-64,]),'LPAREN':([5,6,7,8,9,10,11,12,13,17,19,20,22,23,24,25,26,27,29,33,34,35,36,37,38,41,44,48,49,50,51,54,55,56,57,58,59,60,61,63,64,65,67,68,69,77,80,83,85,86,87,88,89,90,91,92,93,95,97,101,102,103,104,105,106,107,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,147,148,149,150,152,153,154,155,158,169,170,190,192,193,194,201,202,205,206,207,209,210,212,215,216,220,222,223,224,225,226,228,229,231,232,233,234,],[-143,-143,-143,-15,-16,-17,-18,-19,-20,36,-39,-38,-40,-13,-11,-12,-14,-143,55,-6,78,-31,-143,-143,-41,55,55,105,109,109,113,-125,55,-119,-120,-121,-122,-123,-124,-132,-133,-134,-140,-141,-142,55,-39,55,-70,-72,-73,-57,-58,-59,-60,-61,152,154,55,55,-83,113,55,55,-128,-129,55,55,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,55,-120,-143,-32,-67,-71,55,55,55,-74,55,113,-135,-33,-35,-36,-37,55,-66,-126,-127,55,113,55,-34,55,55,-62,55,-130,55,55,55,-131,-63,55,55,-65,-64,]),'TIMES':([5,6,7,8,9,10,11,12,13,22,23,24,25,26,27,29,33,36,37,41,44,46,48,49,50,51,52,54,55,56,57,58,59,60,61,63,64,65,67,68,69,75,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,147,149,150,152,153,154,155,158,169,170,185,186,187,188,189,201,202,205,206,207,209,210,211,215,216,220,222,223,224,225,226,228,229,231,232,233,234,],[22,-143,-143,-15,-16,-17,-18,-19,-20,22,-13,-11,-12,-14,22,57,-6,22,22,57,57,-113,-115,57,57,57,-109,-125,57,-119,-120,-121,-122,-123,-124,-132,-133,-134,-140,-141,-142,132,138,57,-70,-72,-73,-57,-58,-59,-60,-61,57,57,-83,57,57,57,-128,-129,-116,57,-117,-118,-113,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-120,22,-67,-71,57,57,57,-74,57,57,-135,132,132,-110,-111,-112,57,-66,-126,-127,57,57,57,-114,57,57,-62,57,-130,57,57,57,-131,-63,57,57,-65,-64,]),'COMMA':([6,7,8,9,10,11,12,13,15,18,21,23,24,25,26,34,35,39,42,43,45,46,47,48,52,53,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,94,98,99,100,106,107,108,110,111,112,116,142,143,145,146,147,148,157,159,160,161,163,165,168,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,197,198,199,203,204,205,206,211,212,213,214,218,219,223,228,],[-143,-143,-15,-16,-17,-18,-19,-20,-25,37,-23,-13,-11,-12,-14,-30,-31,-25,-26,-50,-81,-113,-84,-115,-109,-85,-125,-87,-132,-133,-134,-89,-140,-141,-142,-91,-93,-95,-98,-103,-106,-24,153,-77,158,-53,-128,-129,-116,-117,-118,-113,153,195,196,-42,-48,-45,-32,-51,-82,-86,153,207,-138,-88,-135,-90,-92,-94,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-33,-35,-36,-37,-44,153,-78,-52,-54,-126,-127,-114,-34,-43,-49,-139,224,-130,-131,]),'RPAREN':([6,7,8,9,10,11,12,13,23,24,25,26,34,35,45,46,47,48,52,53,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,94,98,105,106,107,108,110,111,112,115,116,117,118,140,141,142,143,144,145,146,147,148,151,159,160,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,197,198,199,205,206,211,212,213,214,218,222,223,226,227,228,230,],[-143,-143,-15,-16,-17,-18,-19,-20,-13,-11,-12,-14,-30,-31,-81,-113,-84,-115,-109,-85,-125,-87,-132,-133,-134,-89,-140,-141,-142,-91,-93,-95,-98,-103,-106,-143,148,-75,-77,-143,-128,-129,-116,-117,-118,-113,169,170,-55,-143,193,194,-56,-46,-47,-42,-48,-45,-32,-76,-82,-86,206,-136,-137,-138,208,209,-88,-135,-29,-27,-28,-90,-92,-94,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-33,-35,-36,-37,-44,215,-78,-126,-127,-114,-34,-43,-49,-139,-143,-130,-143,231,-131,232,]),'EQUALS':([15,34,35,39,46,48,54,63,64,65,67,68,69,106,107,108,110,111,112,148,170,190,192,193,194,205,206,211,212,223,228,],[29,-30,-31,29,102,-115,-125,-132,-133,-134,-140,-141,-142,-128,-129,-116,-117,-118,-113,-32,-135,-33,-35,-36,-37,-126,-127,-114,-34,-130,-131,]),'LBRACE':([15,28,29,30,31,32,33,34,35,41,44,76,83,85,86,87,88,89,90,91,92,148,149,150,155,158,190,192,193,194,202,210,212,215,220,224,225,229,231,232,233,234,],[-143,41,44,-7,-8,-9,-6,-30,-31,41,44,-10,41,-70,-72,-73,-57,-58,-59,-60,-61,-32,-67,-71,-74,44,-33,-35,-36,-37,-66,44,-34,41,-62,44,41,-63,41,41,-65,-64,]),'INCREMENT':([29,33,41,44,48,49,50,51,54,55,56,57,58,59,60,61,63,64,65,67,68,69,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,106,107,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,149,150,152,153,154,155,158,169,170,201,202,205,206,207,209,210,215,216,220,222,223,224,225,226,228,229,231,232,233,234,],[49,-6,49,49,106,49,49,49,-125,49,-119,-120,-121,-122,-123,-124,-132,-133,-134,-140,-141,-142,49,49,-70,-72,-73,-57,-58,-59,-60,-61,49,49,-83,49,49,49,-128,-129,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-120,-67,-71,49,49,49,-74,49,49,-135,49,-66,-126,-127,49,49,49,49,49,-62,49,-130,49,49,49,-131,-63,49,49,-65,-64,]),'DECREMENT':([29,33,41,44,48,49,50,51,54,55,56,57,58,59,60,61,63,64,65,67,68,69,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,106,107,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,149,150,152,153,154,155,158,169,170,201,202,205,206,207,209,210,215,216,220,222,223,224,225,226,228,229,231,232,233,234,],[50,-6,50,50,107,50,50,50,-125,50,-119,-120,-121,-122,-123,-124,-132,-133,-134,-140,-141,-142,50,50,-70,-72,-73,-57,-58,-59,-60,-61,50,50,-83,50,50,50,-128,-129,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-120,-67,-71,50,50,50,-74,50,50,-135,50,-66,-126,-127,50,50,50,50,50,-62,50,-130,50,50,50,-131,-63,50,50,-65,-64,]),'AND':([29,33,41,44,46,48,49,50,51,52,54,55,56,57,58,59,60,61,63,64,65,67,68,69,70,71,72,73,74,75,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,149,150,152,153,154,155,158,169,170,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,201,202,205,206,207,209,210,211,215,216,220,222,223,224,225,226,228,229,231,232,233,234,],[56,-6,56,56,-113,-115,56,56,56,-109,-125,56,-119,-120,-121,-122,-123,-124,-132,-133,-134,-140,-141,-142,121,-93,-95,-98,-103,-106,56,56,-70,-72,-73,-57,-58,-59,-60,-61,56,56,-83,56,56,56,-128,-129,-116,56,-117,-118,-113,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-120,-67,-71,56,56,56,-74,56,56,-135,121,-94,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,56,-66,-126,-127,56,56,56,-114,56,56,-62,56,-130,56,56,56,-131,-63,56,56,-65,-64,]),'PLUS':([29,33,41,44,46,48,49,50,51,52,54,55,56,57,58,59,60,61,63,64,65,67,68,69,74,75,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,149,150,152,153,154,155,158,169,170,183,184,185,186,187,188,189,201,202,205,206,207,209,210,211,215,216,220,222,223,224,225,226,228,229,231,232,233,234,],[58,-6,58,58,-113,-115,58,58,58,-109,-125,58,-119,-120,-121,-122,-123,-124,-132,-133,-134,-140,-141,-142,130,-106,58,58,-70,-72,-73,-57,-58,-59,-60,-61,58,58,-83,58,58,58,-128,-129,-116,58,-117,-118,-113,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-120,-67,-71,58,58,58,-74,58,58,-135,130,130,-107,-108,-110,-111,-112,58,-66,-126,-127,58,58,58,-114,58,58,-62,58,-130,58,58,58,-131,-63,58,58,-65,-64,]),'MINUS':([29,33,41,44,46,48,49,50,51,52,54,55,56,57,58,59,60,61,63,64,65,67,68,69,74,75,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,149,150,152,153,154,155,158,169,170,183,184,185,186,187,188,189,201,202,205,206,207,209,210,211,215,216,220,222,223,224,225,226,228,229,231,232,233,234,],[59,-6,59,59,-113,-115,59,59,59,-109,-125,59,-119,-120,-121,-122,-123,-124,-132,-133,-134,-140,-141,-142,131,-106,59,59,-70,-72,-73,-57,-58,-59,-60,-61,59,59,-83,59,59,59,-128,-129,-116,59,-117,-118,-113,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-120,-67,-71,59,59,59,-74,59,59,-135,131,131,-107,-108,-110,-111,-112,59,-66,-126,-127,59,59,59,-114,59,59,-62,59,-130,59,59,59,-131,-63,59,59,-65,-64,]),'NOT':([29,33,41,44,49,50,51,55,56,57,58,59,60,61,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,149,150,152,153,154,155,158,169,201,202,207,209,210,215,216,220,222,224,225,226,229,231,232,233,234,],[60,-6,60,60,60,60,60,60,-119,-120,-121,-122,-123,-124,60,60,-70,-72,-73,-57,-58,-59,-60,-61,60,60,-83,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-120,-67,-71,60,60,60,-74,60,60,60,-66,60,60,60,60,60,-62,60,60,60,60,-63,60,60,-65,-64,]),'LNOT':([29,33,41,44,49,50,51,55,56,57,58,59,60,61,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,149,150,152,153,154,155,158,169,201,202,207,209,210,215,216,220,222,224,225,226,229,231,232,233,234,],[61,-6,61,61,61,61,61,61,-119,-120,-121,-122,-123,-124,61,61,-70,-72,-73,-57,-58,-59,-60,-61,61,61,-83,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-120,-67,-71,61,61,61,-74,61,61,61,-66,61,61,61,61,61,-62,61,61,61,61,-63,61,61,-65,-64,]),'STRING':([29,33,41,44,49,50,51,55,56,57,58,59,60,61,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,149,150,152,153,154,155,158,169,201,202,207,209,210,215,216,220,222,224,225,226,229,231,232,233,234,],[65,-6,65,65,65,65,65,65,-119,-120,-121,-122,-123,-124,65,65,-70,-72,-73,-57,-58,-59,-60,-61,65,65,-83,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-120,-67,-71,65,65,65,-74,65,65,65,-66,65,65,65,65,65,-62,65,65,65,65,-63,65,65,-65,-64,]),'INUM':([29,33,41,44,49,50,51,55,56,57,58,59,60,61,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,149,150,152,153,154,155,158,169,201,202,207,209,210,215,216,220,222,224,225,226,229,231,232,233,234,],[67,-6,67,67,67,67,67,67,-119,-120,-121,-122,-123,-124,67,67,-70,-72,-73,-57,-58,-59,-60,-61,67,67,-83,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-120,-67,-71,67,67,67,-74,67,67,67,-66,67,67,67,67,67,-62,67,67,67,67,-63,67,67,-65,-64,]),'FNUM':([29,33,41,44,49,50,51,55,56,57,58,59,60,61,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,149,150,152,153,154,155,158,169,201,202,207,209,210,215,216,220,222,224,225,226,229,231,232,233,234,],[68,-6,68,68,68,68,68,68,-119,-120,-121,-122,-123,-124,68,68,-70,-72,-73,-57,-58,-59,-60,-61,68,68,-83,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-120,-67,-71,68,68,68,-74,68,68,68,-66,68,68,68,68,68,-62,68,68,68,68,-63,68,68,-65,-64,]),'CHARACTER':([29,33,41,44,49,50,51,55,56,57,58,59,60,61,77,83,85,86,87,88,89,90,91,92,97,101,102,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,149,150,152,153,154,155,158,169,201,202,207,209,210,215,216,220,222,224,225,226,229,231,232,233,234,],[69,-6,69,69,69,69,69,69,-119,-120,-121,-122,-123,-124,69,69,-70,-72,-73,-57,-58,-59,-60,-61,69,69,-83,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-120,-67,-71,69,69,69,-74,69,69,69,-66,69,69,69,69,69,-62,69,69,69,69,-63,69,69,-65,-64,]),'IF':([33,41,83,85,86,87,88,89,90,91,92,149,150,155,202,215,220,225,229,231,232,233,234,],[-6,93,93,-70,-72,-73,-57,-58,-59,-60,-61,-67,-71,-74,-66,93,-62,93,-63,93,93,-65,-64,]),'FOR':([33,41,83,85,86,87,88,89,90,91,92,149,150,155,202,215,220,225,229,231,232,233,234,],[-6,95,95,-70,-72,-73,-57,-58,-59,-60,-61,-67,-71,-74,-66,95,-62,95,-63,95,95,-65,-64,]),'RETURN':([33,41,83,85,86,87,88,89,90,91,92,149,150,155,202,215,220,225,229,231,232,233,234,],[-6,97,97,-70,-72,-73,-57,-58,-59,-60,-61,-67,-71,-74,-66,97,-62,97,-63,97,97,-65,-64,]),'RBRACE':([33,41,43,45,46,47,48,52,53,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,82,83,84,85,86,87,88,89,90,91,92,99,100,106,107,108,110,111,112,149,150,155,157,158,159,160,168,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,202,203,204,205,206,211,220,223,228,229,233,234,],[-6,-143,-50,-81,-113,-84,-115,-109,-85,-125,-87,-132,-133,-134,-89,-140,-141,-142,-91,-93,-95,-98,-103,-106,149,-68,-69,-70,-72,-73,-57,-58,-59,-60,-61,157,-53,-128,-129,-116,-117,-118,-113,-67,-71,-74,-51,203,-82,-86,-88,-135,-90,-92,-94,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-66,-52,-54,-126,-127,-114,-62,-130,-131,-63,-65,-64,]),'LBRACKET':([34,35,48,54,63,64,65,67,68,69,106,107,148,169,170,190,192,193,194,205,206,208,209,212,223,228,],[77,-31,104,-125,-132,-133,-134,-140,-141,-142,-128,-129,-32,210,-135,-33,-35,-36,-37,-126,-127,210,210,-34,-130,-131,]),'RBRACKET':([43,45,46,47,48,52,53,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,98,100,106,107,108,110,111,112,135,137,138,139,157,159,160,161,168,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,199,203,204,205,206,211,219,223,224,228,],[-50,-81,-113,-84,-115,-109,-85,-125,-87,-132,-133,-134,-89,-140,-141,-142,-91,-93,-95,-98,-103,-106,-143,-77,-53,-128,-129,-116,-117,-118,-113,190,-79,192,-80,-51,-82,-86,205,-88,-135,-90,-92,-94,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,212,-78,-52,-54,-126,-127,-114,223,-130,228,-131,]),'DIVIDE':([46,48,52,54,63,64,65,67,68,69,75,106,107,108,110,111,112,170,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,-132,-133,-134,-140,-141,-142,133,-128,-129,-116,-117,-118,-113,-135,133,133,-110,-111,-112,-126,-127,-114,-130,-131,]),'MOD':([46,48,52,54,63,64,65,67,68,69,75,106,107,108,110,111,112,170,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,-132,-133,-134,-140,-141,-142,134,-128,-129,-116,-117,-118,-113,-135,134,134,-110,-111,-112,-126,-127,-114,-130,-131,]),'LSHIFT':([46,48,52,54,63,64,65,67,68,69,73,74,75,106,107,108,110,111,112,170,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,-132,-133,-134,-140,-141,-142,128,-103,-106,-128,-129,-116,-117,-118,-113,-135,128,128,128,128,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'RSHIFT':([46,48,52,54,63,64,65,67,68,69,73,74,75,106,107,108,110,111,112,170,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,-132,-133,-134,-140,-141,-142,129,-103,-106,-128,-129,-116,-117,-118,-113,-135,129,129,129,129,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'LT':([46,48,52,54,63,64,65,67,68,69,72,73,74,75,106,107,108,110,111,112,170,177,178,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,-132,-133,-134,-140,-141,-142,124,-98,-103,-106,-128,-129,-116,-117,-118,-113,-135,124,124,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'GT':([46,48,52,54,63,64,65,67,68,69,72,73,74,75,106,107,108,110,111,112,170,177,178,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,-132,-133,-134,-140,-141,-142,125,-98,-103,-106,-128,-129,-116,-117,-118,-113,-135,125,125,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'LE':([46,48,52,54,63,64,65,67,68,69,72,73,74,75,106,107,108,110,111,112,170,177,178,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,-132,-133,-134,-140,-141,-142,126,-98,-103,-106,-128,-129,-116,-117,-118,-113,-135,126,126,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'GE':([46,48,52,54,63,64,65,67,68,69,72,73,74,75,106,107,108,110,111,112,170,177,178,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,-132,-133,-134,-140,-141,-142,127,-98,-103,-106,-128,-129,-116,-117,-118,-113,-135,127,127,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'EQ':([46,48,52,54,63,64,65,67,68,69,71,72,73,74,75,106,107,108,110,111,112,170,176,177,178,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,-132,-133,-134,-140,-141,-142,122,-95,-98,-103,-106,-128,-129,-116,-117,-118,-113,-135,122,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'NE':([46,48,52,54,63,64,65,67,68,69,71,72,73,74,75,106,107,108,110,111,112,170,176,177,178,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,-132,-133,-134,-140,-141,-142,123,-95,-98,-103,-106,-128,-129,-116,-117,-118,-113,-135,123,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'XOR':([46,48,52,54,63,64,65,66,67,68,69,70,71,72,73,74,75,106,107,108,110,111,112,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,-132,-133,-134,120,-140,-141,-142,-91,-93,-95,-98,-103,-106,-128,-129,-116,-117,-118,-113,-135,120,-92,-94,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'OR':([46,48,52,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,106,107,108,110,111,112,168,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,-125,119,-132,-133,-134,-89,-140,-141,-142,-91,-93,-95,-98,-103,-106,-128,-129,-116,-117,-118,-113,119,-135,-90,-92,-94,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'LAND':([46,48,52,53,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,106,107,108,110,111,112,160,168,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,-115,-109,114,-125,-87,-132,-133,-134,-89,-140,-141,-142,-91,-93,-95,-98,-103,-106,-128,-129,-116,-117,-118,-113,114,-88,-135,-90,-92,-94,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'LOR':([46,47,48,52,53,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,106,107,108,110,111,112,160,168,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,205,206,211,223,228,],[-113,103,-115,-109,-85,-125,-87,-132,-133,-134,-89,-140,-141,-142,-91,-93,-95,-98,-103,-106,-128,-129,-116,-117,-118,-113,-86,-88,-135,-90,-92,-94,-96,-97,-99,-100,-101,-102,-104,-105,-107,-108,-110,-111,-112,-126,-127,-114,-130,-131,]),'ELSE':([88,89,90,91,92,149,155,202,220,229,233,234,],[-57,-58,-59,-60,-61,-67,-74,-66,225,-63,-65,-64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,14,]),'function_definition':([0,1,],[3,3,]),'declaration':([0,1,15,30,41,83,154,],[4,4,32,76,86,86,201,]),'declaration_specifiers':([0,1,6,7,15,30,41,78,83,154,195,],[5,5,24,24,27,27,27,147,27,27,147,]),'storage_class_specifier':([0,1,6,7,15,30,41,78,83,154,195,],[6,6,6,6,6,6,6,6,6,6,6,]),'type_specifier':([0,1,6,7,15,30,41,55,78,83,109,113,118,154,195,],[7,7,7,7,7,7,7,118,7,7,118,118,118,7,7,]),'declarator':([5,27,36,37,147,],[15,39,79,39,197,]),'init_declarator_listopt':([5,27,],[16,16,]),'pointeropt':([5,27,36,37,147,],[17,17,17,17,17,]),'init_declarator_list':([5,27,],[18,18,]),'empty':([5,6,7,15,27,36,37,41,77,78,83,97,105,118,147,154,201,215,216,222,225,226,231,232,],[19,25,25,31,19,80,80,84,139,144,151,151,164,173,80,151,151,151,151,151,151,151,151,151,]),'pointer':([5,22,27,36,37,147,],[20,38,20,20,20,20,]),'init_declarator':([5,27,37,],[21,21,81,]),'declaration_specifiersopt':([6,7,],[23,26,]),'declaration_listopt':([15,],[28,]),'declaration_list':([15,],[30,]),'direct_declarator':([17,],[34,]),'compound_statement':([28,41,83,215,225,231,232,],[40,91,91,91,91,91,91,]),'initializer':([29,44,158,210,224,],[42,100,204,100,204,]),'assignment_expression':([29,41,44,55,77,83,97,101,104,105,109,113,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[43,98,43,98,137,98,98,159,98,165,98,98,191,98,199,98,43,98,218,43,98,98,98,43,98,98,98,98,]),'conditional_expression':([29,41,44,55,77,83,97,101,104,105,109,113,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'unary_expression':([29,41,44,49,50,51,55,77,83,97,101,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,152,153,154,158,169,201,207,209,210,215,216,222,224,225,226,231,232,],[46,46,46,108,110,112,46,46,46,46,46,112,46,46,46,46,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,46,46,46,46,46,112,46,46,112,46,46,46,46,46,46,46,46,46,]),'logical_OR_expression':([29,41,44,55,77,83,97,101,104,105,109,113,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'postfix_expression':([29,41,44,49,50,51,55,77,83,97,101,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,152,153,154,158,169,201,207,209,210,215,216,222,224,225,226,231,232,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'unary_operator':([29,41,44,49,50,51,55,77,83,97,101,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,152,153,154,158,169,201,207,209,210,215,216,222,224,225,226,231,232,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'cast_expression':([29,41,44,51,55,77,83,97,101,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,152,153,154,158,169,201,207,209,210,215,216,222,224,225,226,231,232,],[52,52,52,111,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,187,188,189,52,52,52,52,52,211,52,52,211,52,52,52,52,52,52,52,52,52,]),'logical_AND_expression':([29,41,44,55,77,83,97,101,103,104,105,109,113,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[53,53,53,53,53,53,53,53,160,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'primary_expression':([29,41,44,49,50,51,55,77,83,97,101,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,152,153,154,158,169,201,207,209,210,215,216,222,224,225,226,231,232,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'inclusive_OR_expression':([29,41,44,55,77,83,97,101,103,104,105,109,113,114,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[62,62,62,62,62,62,62,62,62,62,62,62,62,168,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'constant':([29,41,44,49,50,51,55,77,83,97,101,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,152,153,154,158,169,201,207,209,210,215,216,222,224,225,226,231,232,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'exclusive_OR_expression':([29,41,44,55,77,83,97,101,103,104,105,109,113,114,119,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,174,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'AND_expression':([29,41,44,55,77,83,97,101,103,104,105,109,113,114,119,120,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,175,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'equality_expression':([29,41,44,55,77,83,97,101,103,104,105,109,113,114,119,120,121,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,176,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'relational_expression':([29,41,44,55,77,83,97,101,103,104,105,109,113,114,119,120,121,122,123,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,177,178,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'shift_expression':([29,41,44,55,77,83,97,101,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,179,180,181,182,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'additive_expression':([29,41,44,55,77,83,97,101,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,183,184,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'multiplicative_expression':([29,41,44,55,77,83,97,101,103,104,105,109,113,114,119,120,121,122,123,124,125,126,127,128,129,130,131,136,152,153,154,158,201,207,210,215,216,222,224,225,226,231,232,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,185,186,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'block_item_listopt':([41,],[82,]),'block_item_list':([41,],[83,]),'block_item':([41,83,],[85,150,]),'statement':([41,83,215,225,231,232,],[87,87,220,229,233,234,]),'selection_statement':([41,83,215,225,231,232,],[88,88,88,88,88,88,]),'iteration_statement':([41,83,215,225,231,232,],[89,89,89,89,89,89,]),'jump_statement':([41,83,215,225,231,232,],[90,90,90,90,90,90,]),'expression_statement':([41,83,215,225,231,232,],[92,92,92,92,92,92,]),'expression':([41,55,83,97,104,109,113,152,154,201,215,216,222,225,226,231,232,],[94,116,94,94,161,116,116,198,94,94,94,94,94,94,94,94,94,]),'expressionopt':([41,83,97,154,201,215,216,222,225,226,231,232,],[96,96,156,200,217,96,221,227,96,230,96,96,]),'initializer_list':([44,210,],[99,219,]),'assignment_operator':([46,],[101,]),'type_name':([55,109,113,],[115,166,167,]),'specifier_qualifier_list':([55,109,113,118,],[117,117,117,172,]),'assignment_expressionopt':([77,],[135,]),'parameter_type_list':([78,],[140,]),'identifier_listopt':([78,],[141,]),'parameter_list':([78,],[142,]),'identifier_list':([78,],[143,]),'parameter_declaration':([78,195,],[145,213,]),'argument_expression_listopt':([105,],[162,]),'argument_expression_list':([105,],[163,]),'specifier_qualifier_listopt':([118,],[171,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit_1','Parser.py',19),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit_2','Parser.py',23),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration_1','Parser.py',33),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_2','Parser.py',37),
  ('function_definition -> declaration_specifiers declarator declaration_listopt compound_statement','function_definition',4,'p_function_definition','Parser.py',46),
  ('declaration -> declaration_specifiers init_declarator_listopt SEMI','declaration',3,'p_declaration','Parser.py',55),
  ('declaration_listopt -> declaration_list','declaration_listopt',1,'p_declaration_listopt_1','Parser.py',65),
  ('declaration_listopt -> empty','declaration_listopt',1,'p_declarationopt_list_2','Parser.py',70),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_1','Parser.py',81),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_2','Parser.py',85),
  ('declaration_specifiersopt -> declaration_specifiers','declaration_specifiersopt',1,'p_declaration_specifiersopt_1','Parser.py',95),
  ('declaration_specifiersopt -> empty','declaration_specifiersopt',1,'p_declaration_specifiersopt_2','Parser.py',99),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiersopt','declaration_specifiers',2,'p_declaration_specifiers_1','Parser.py',111),
  ('declaration_specifiers -> type_specifier declaration_specifiersopt','declaration_specifiers',2,'p_declaration_specifiers_2','Parser.py',115),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','Parser.py',128),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','Parser.py',129),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','Parser.py',142),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parser.py',143),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','Parser.py',144),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','Parser.py',145),
  ('init_declarator_listopt -> init_declarator_list','init_declarator_listopt',1,'p_init_declarator_listopt_1','Parser.py',155),
  ('init_declarator_listopt -> empty','init_declarator_listopt',1,'p_init_declarator_listopt_2','Parser.py',159),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list_1','Parser.py',169),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list_2','Parser.py',173),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator_1','Parser.py',183),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator_2','Parser.py',187),
  ('specifier_qualifier_listopt -> specifier_qualifier_list','specifier_qualifier_listopt',1,'p_specifier_qualifier_listopt_1','Parser.py',197),
  ('specifier_qualifier_listopt -> empty','specifier_qualifier_listopt',1,'p_specifier_qualifier_listopt_2','Parser.py',201),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_listopt','specifier_qualifier_list',2,'p_specifier_qualifier_list','Parser.py',211),
  ('declarator -> pointeropt direct_declarator','declarator',2,'p_declarator','Parser.py',220),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator_1','Parser.py',236),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','Parser.py',240),
  ('direct_declarator -> direct_declarator LBRACKET assignment_expressionopt RBRACKET','direct_declarator',4,'p_direct_declarator_3','Parser.py',244),
  ('direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET','direct_declarator',5,'p_direct_declarator_4','Parser.py',248),
  ('direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET','direct_declarator',4,'p_direct_declarator_5','Parser.py',252),
  ('direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN','direct_declarator',4,'p_direct_declarator_6','Parser.py',256),
  ('direct_declarator -> direct_declarator LPAREN identifier_listopt RPAREN','direct_declarator',4,'p_direct_declarator_7','Parser.py',260),
  ('pointeropt -> pointer','pointeropt',1,'p_pointeropt_1','Parser.py',270),
  ('pointeropt -> empty','pointeropt',1,'p_pointeropt_2','Parser.py',274),
  ('pointer -> TIMES','pointer',1,'p_pointer_1','Parser.py',284),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer_2','Parser.py',288),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list_1','Parser.py',298),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list_2','Parser.py',302),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration_1','Parser.py',312),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration_2','Parser.py',316),
  ('identifier_listopt -> identifier_list','identifier_listopt',1,'p_identifier_listopt_1','Parser.py',326),
  ('identifier_listopt -> empty','identifier_listopt',1,'p_identifier_listopt_2','Parser.py',330),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list_1','Parser.py',340),
  ('identifier_list -> identifier_list COMMA ID','identifier_list',3,'p_identifier_list_2','Parser.py',344),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','Parser.py',356),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer_2','Parser.py',360),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_2','Parser.py',361),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list_1','Parser.py',371),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list_2','Parser.py',375),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','Parser.py',384),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','Parser.py',394),
  ('statement -> selection_statement','statement',1,'p_statement_1','Parser.py',407),
  ('statement -> iteration_statement','statement',1,'p_statement_2','Parser.py',411),
  ('statement -> jump_statement','statement',1,'p_statement_3','Parser.py',415),
  ('statement -> compound_statement','statement',1,'p_statement_4','Parser.py',419),
  ('statement -> expression_statement','statement',1,'p_statement_5','Parser.py',423),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','Parser.py',433),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_2','Parser.py',437),
  ('iteration_statement -> FOR LPAREN expressionopt SEMI expressionopt SEMI expressionopt RPAREN statement','iteration_statement',9,'p_iteration_statement_1','Parser.py',447),
  ('iteration_statement -> FOR LPAREN declaration expressionopt SEMI expressionopt RPAREN statement','iteration_statement',8,'p_iteration_statement_2','Parser.py',451),
  ('jump_statement -> RETURN expressionopt SEMI','jump_statement',3,'p_jump_statement','Parser.py',460),
  ('compound_statement -> LBRACE block_item_listopt RBRACE','compound_statement',3,'p_compound_statement','Parser.py',469),
  ('block_item_listopt -> block_item_list','block_item_listopt',1,'p_block_item_listopt_1','Parser.py',479),
  ('block_item_listopt -> empty','block_item_listopt',1,'p_block_item_listopt_2','Parser.py',483),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list_1','Parser.py',493),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list_2','Parser.py',497),
  ('block_item -> declaration','block_item',1,'p_block_item_1','Parser.py',507),
  ('block_item -> statement','block_item',1,'p_block_item_2','Parser.py',511),
  ('expression_statement -> expressionopt SEMI','expression_statement',2,'p_expression_statement','Parser.py',520),
  ('expressionopt -> expression','expressionopt',1,'p_expressionopt_1','Parser.py',530),
  ('expressionopt -> empty','expressionopt',1,'p_expressionopt_2','Parser.py',534),
  ('expression -> assignment_expression','expression',1,'p_expression_1','Parser.py',544),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression_2','Parser.py',548),
  ('assignment_expressionopt -> assignment_expression','assignment_expressionopt',1,'p_assignment_expressionopt_1','Parser.py',558),
  ('assignment_expressionopt -> empty','assignment_expressionopt',1,'p_assignment_expressionopt_2','Parser.py',562),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression_1','Parser.py',572),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression_2','Parser.py',576),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','Parser.py',585),
  ('conditional_expression -> logical_OR_expression','conditional_expression',1,'p_conditional_expression','Parser.py',595),
  ('logical_OR_expression -> logical_AND_expression','logical_OR_expression',1,'p_logical_OR_expression_1','Parser.py',604),
  ('logical_OR_expression -> logical_OR_expression LOR logical_AND_expression','logical_OR_expression',3,'p_logical_OR_expression_2','Parser.py',608),
  ('logical_AND_expression -> inclusive_OR_expression','logical_AND_expression',1,'p_logical_AND_expression_1','Parser.py',618),
  ('logical_AND_expression -> logical_AND_expression LAND inclusive_OR_expression','logical_AND_expression',3,'p_logical_AND_expression_2','Parser.py',622),
  ('inclusive_OR_expression -> exclusive_OR_expression','inclusive_OR_expression',1,'p_inclusive_OR_expression_1','Parser.py',632),
  ('inclusive_OR_expression -> inclusive_OR_expression OR exclusive_OR_expression','inclusive_OR_expression',3,'p_inclusive_OR_expression_2','Parser.py',636),
  ('exclusive_OR_expression -> AND_expression','exclusive_OR_expression',1,'p_exclusive_OR_expression_1','Parser.py',646),
  ('exclusive_OR_expression -> exclusive_OR_expression XOR AND_expression','exclusive_OR_expression',3,'p_exclusive_OR_expression_2','Parser.py',650),
  ('AND_expression -> equality_expression','AND_expression',1,'p_AND_expression_1','Parser.py',660),
  ('AND_expression -> AND_expression AND equality_expression','AND_expression',3,'p_AND_expression_2','Parser.py',664),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_1','Parser.py',675),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression_2','Parser.py',679),
  ('equality_expression -> equality_expression NE relational_expression','equality_expression',3,'p_equality_expression_3','Parser.py',683),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression_1','Parser.py',696),
  ('relational_expression -> relational_expression LT shift_expression','relational_expression',3,'p_relational_expression_2','Parser.py',700),
  ('relational_expression -> relational_expression GT shift_expression','relational_expression',3,'p_relational_expression_3','Parser.py',704),
  ('relational_expression -> relational_expression LE shift_expression','relational_expression',3,'p_relational_expression_4','Parser.py',708),
  ('relational_expression -> relational_expression GE shift_expression','relational_expression',3,'p_relational_expression_5','Parser.py',712),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression_1','Parser.py',723),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression_2','Parser.py',727),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression_3','Parser.py',731),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression_1','Parser.py',742),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression_2','Parser.py',746),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression_3','Parser.py',750),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression_1','Parser.py',762),
  ('multiplicative_expression -> multiplicative_expression TIMES cast_expression','multiplicative_expression',3,'p_multiplicative_expression_2','Parser.py',766),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression_3','Parser.py',770),
  ('multiplicative_expression -> multiplicative_expression MOD cast_expression','multiplicative_expression',3,'p_multiplicative_expression_4','Parser.py',774),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','Parser.py',784),
  ('cast_expression -> LPAREN type_name RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','Parser.py',788),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','Parser.py',802),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression_2','Parser.py',806),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression_3','Parser.py',810),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_4','Parser.py',814),
  ('unary_operator -> AND','unary_operator',1,'p_unary_operator','Parser.py',828),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','Parser.py',829),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','Parser.py',830),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','Parser.py',831),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','Parser.py',832),
  ('unary_operator -> LNOT','unary_operator',1,'p_unary_operator','Parser.py',833),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','Parser.py',851),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','Parser.py',855),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_listopt RPAREN','postfix_expression',4,'p_postfix_expression_3','Parser.py',859),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression_4','Parser.py',863),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression_5','Parser.py',867),
  ('postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list RBRACKET','postfix_expression',6,'p_postfix_expression_6','Parser.py',871),
  ('postfix_expression -> LPAREN type_name RPAREN LBRACKET initializer_list COMMA RBRACKET','postfix_expression',7,'p_postfix_expression_7','Parser.py',875),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','Parser.py',887),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','Parser.py',888),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','Parser.py',889),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','Parser.py',890),
  ('argument_expression_listopt -> argument_expression_list','argument_expression_listopt',1,'p_argument_expression_listopt_1','Parser.py',901),
  ('argument_expression_listopt -> empty','argument_expression_listopt',1,'p_argument_expression_listopt_2','Parser.py',905),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list_1','Parser.py',915),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list_2','Parser.py',919),
  ('constant -> INUM','constant',1,'p_constant','Parser.py',927),
  ('constant -> FNUM','constant',1,'p_constant','Parser.py',928),
  ('constant -> CHARACTER','constant',1,'p_constant','Parser.py',929),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',937),
]
